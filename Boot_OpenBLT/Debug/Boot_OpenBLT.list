
Boot_OpenBLT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004774  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000005d8  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005e8  200005e8  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa1c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e5  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00013e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae4  00000000  00000000  00014d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f82  00000000  00000000  00015834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe7c  00000000  00000000  000387b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c907e  00000000  00000000  00048632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001116b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003814  00000000  00000000  001116f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00114f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004680 	.word	0x08004680

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004680 	.word	0x08004680

080001d4 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* initialize the bootloader */
  BootInit();
 80001d8:	f003 fb80 	bl	80038dc <BootInit>
} /*** end of AppInit ***/
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}

080001e0 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Run the bootloader task. */
  BootTask();
 80001e4:	f003 fb8c 	bl	8003900 <BootTask>
} /*** end of AppTask ***/
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}

080001ec <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	691a      	ldr	r2, [r3, #16]
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	4013      	ands	r3, r2
 80001fe:	683a      	ldr	r2, [r7, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	bf0c      	ite	eq
 8000204:	2301      	moveq	r3, #1
 8000206:	2300      	movne	r3, #0
 8000208:	b2db      	uxtb	r3, r3
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr

08000216 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the D2 (PA0) digital input on the
   * board. to force the bootloader to stay active after reset, connect D2 to ground.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) == 0)
 800021a:	2101      	movs	r1, #1
 800021c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000220:	f7ff ffe4 	bl	80001ec <LL_GPIO_IsInputPinSet>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d101      	bne.n	800022e <CpuUserProgramStartHook+0x18>
  {
    return BLT_FALSE;
 800022a:	2300      	movs	r3, #0
 800022c:	e002      	b.n	8000234 <CpuUserProgramStartHook+0x1e>
  }
  /* clean up the LED driver */
  LedBlinkExit();
 800022e:	f000 f88b 	bl	8000348 <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 8000232:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 8000234:	4618      	mov	r0, r3
 8000236:	bd80      	pop	{r7, pc}

08000238 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 800023c:	2064      	movs	r0, #100	@ 0x64
 800023e:	f000 f845 	bl	80002cc <LedBlinkInit>
} /*** end of CopInitHook ***/
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}

08000246 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8000246:	b580      	push	{r7, lr}
 8000248:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 800024a:	f000 f84f 	bl	80002ec <LedBlinkTask>
} /*** end of CopServiceHook ***/
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}

08000252 <InfoTableCheckHook>:
** \return    BLT_TRUE if the info table check passed and the firmware update is allowed
**            to proceed. BLT_FALSE if the firmware update is not allowed to proceed.
**
****************************************************************************************/
blt_bool InfoTableCheckHook(blt_addr newInfoTable,  blt_addr currentInfoTable)
{
 8000252:	b480      	push	{r7}
 8000254:	b087      	sub	sp, #28
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	6039      	str	r1, [r7, #0]
  blt_bool result = BLT_FALSE;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
    blt_int32u productId;        /**< product identification. E.g. 1234 = Airpump.     */
    blt_int32u firmwareVersion;  /**< firmware version. E.g. 10429 = v1.4.29           */
  };

  /* Cast addresses of opaque pointers to info table pointers. */
  struct firmwareInfoTable const * newInfoTablePtr     = (void const *)newInfoTable;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	613b      	str	r3, [r7, #16]
  struct firmwareInfoTable const * currentInfoTablePtr = (void const *)currentInfoTable;
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Sanity check on the configured length of the info table at compile time. */
  ASSERT_CT(BOOT_INFO_TABLE_LEN == sizeof(struct firmwareInfoTable));

  /* Do table IDs match? The table ID identifies the tables as firmware info tables. */
  if (currentInfoTablePtr->tableId == newInfoTablePtr->tableId)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d107      	bne.n	8000284 <InfoTableCheckHook+0x32>
  {
    /* Only allow the firmware update to proceed if it's firmware for the same
     * product type.
     */
    if (currentInfoTablePtr->productId == newInfoTablePtr->productId)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	d101      	bne.n	8000284 <InfoTableCheckHook+0x32>
    {
      /* Allow the firmware update to proceed. */
      result = BLT_TRUE;
 8000280:	2301      	movs	r3, #1
 8000282:	75fb      	strb	r3, [r7, #23]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8000284:	7dfb      	ldrb	r3, [r7, #23]
} /*** end of InfoTableCheckHook ***/
 8000286:	4618      	mov	r0, r3
 8000288:	371c      	adds	r7, #28
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	619a      	str	r2, [r3, #24]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 80002d6:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <LedBlinkInit+0x1c>)
 80002d8:	88fb      	ldrh	r3, [r7, #6]
 80002da:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	2000002c 	.word	0x2000002c

080002ec <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 80002f0:	f003 fa94 	bl	800381c <TimerGet>
 80002f4:	4602      	mov	r2, r0
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <LedBlinkTask+0x50>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d31c      	bcc.n	8000338 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 80002fe:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <LedBlinkTask+0x54>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d108      	bne.n	8000318 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <LedBlinkTask+0x54>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
      LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800030c:	2120      	movs	r1, #32
 800030e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000312:	f7ff ffbe 	bl	8000292 <LL_GPIO_SetOutputPin>
 8000316:	e007      	b.n	8000328 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <LedBlinkTask+0x54>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
      LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800031e:	2120      	movs	r1, #32
 8000320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000324:	f7ff ffc3 	bl	80002ae <LL_GPIO_ResetOutputPin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8000328:	f003 fa78 	bl	800381c <TimerGet>
 800032c:	4603      	mov	r3, r0
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <LedBlinkTask+0x58>)
 8000330:	8812      	ldrh	r2, [r2, #0]
 8000332:	4413      	add	r3, r2
 8000334:	4a01      	ldr	r2, [pc, #4]	@ (800033c <LedBlinkTask+0x50>)
 8000336:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000030 	.word	0x20000030
 8000340:	20000034 	.word	0x20000034
 8000344:	2000002c 	.word	0x2000002c

08000348 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* turn the LED off */
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000352:	f7ff ffac 	bl	80002ae <LL_GPIO_ResetOutputPin>
} /*** end of LedBlinkExit ***/
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000360:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <LL_RCC_HSI_Enable+0x1c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <LL_RCC_HSI_Enable+0x1c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <LL_RCC_HSI_IsReady+0x20>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0302 	and.w	r3, r3, #2
 8000388:	2b02      	cmp	r3, #2
 800038a:	bf0c      	ite	eq
 800038c:	2301      	moveq	r3, #1
 800038e:	2300      	movne	r3, #0
 8000390:	b2db      	uxtb	r3, r3
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003a8:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	00db      	lsls	r3, r3, #3
 80003b4:	4904      	ldr	r1, [pc, #16]	@ (80003c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003b6:	4313      	orrs	r3, r2
 80003b8:	600b      	str	r3, [r1, #0]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <LL_RCC_SetSysClkSource+0x24>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	f023 0203 	bic.w	r2, r3, #3
 80003dc:	4904      	ldr	r1, [pc, #16]	@ (80003f0 <LL_RCC_SetSysClkSource+0x24>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	604b      	str	r3, [r1, #4]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <LL_RCC_GetSysClkSource+0x18>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f003 030c 	and.w	r3, r3, #12
}
 8000400:	4618      	mov	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <LL_RCC_SetAHBPrescaler+0x24>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000420:	4904      	ldr	r1, [pc, #16]	@ (8000434 <LL_RCC_SetAHBPrescaler+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	604b      	str	r3, [r1, #4]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000448:	4904      	ldr	r1, [pc, #16]	@ (800045c <LL_RCC_SetAPB1Prescaler+0x24>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <LL_RCC_SetAPB2Prescaler+0x24>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000470:	4904      	ldr	r1, [pc, #16]	@ (8000484 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	604b      	str	r3, [r1, #4]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <LL_RCC_SetUSARTClockSource+0x34>)
 8000492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	0e1b      	lsrs	r3, r3, #24
 8000498:	2103      	movs	r1, #3
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80004a8:	4904      	ldr	r1, [pc, #16]	@ (80004bc <LL_RCC_SetUSARTClockSource+0x34>)
 80004aa:	4313      	orrs	r3, r2
 80004ac:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <LL_RCC_PLL_Enable+0x1c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <LL_RCC_PLL_Enable+0x1c>)
 80004ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004e4:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <LL_RCC_PLL_IsReady+0x24>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80004f0:	bf0c      	ite	eq
 80004f2:	2301      	moveq	r3, #1
 80004f4:	2300      	movne	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	430b      	orrs	r3, r1
 8000522:	4908      	ldr	r1, [pc, #32]	@ (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000524:	4313      	orrs	r3, r2
 8000526:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800052a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052c:	f023 020f 	bic.w	r2, r3, #15
 8000530:	4904      	ldr	r1, [pc, #16]	@ (8000544 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000

08000578 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	4907      	ldr	r1, [pc, #28]	@ (80005a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <LL_SYSCFG_SetEXTISource+0x5c>)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f003 0303 	and.w	r3, r3, #3
 80005ba:	3302      	adds	r3, #2
 80005bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	43db      	mvns	r3, r3
 80005c6:	ea02 0103 	and.w	r1, r2, r3
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	fa93 f3a3 	rbit	r3, r3
 80005d6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	fab3 f383 	clz	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	fa03 f202 	lsl.w	r2, r3, r2
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <LL_SYSCFG_SetEXTISource+0x5c>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f003 0303 	and.w	r3, r3, #3
 80005f0:	430a      	orrs	r2, r1
 80005f2:	3302      	adds	r3, #2
 80005f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40010000 	.word	0x40010000

08000608 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <LL_FLASH_SetLatency+0x24>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 0207 	bic.w	r2, r3, #7
 8000618:	4904      	ldr	r1, [pc, #16]	@ (800062c <LL_FLASH_SetLatency+0x24>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	600b      	str	r3, [r1, #0]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40022000 	.word	0x40022000

08000630 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <LL_FLASH_GetLatency+0x18>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 0307 	and.w	r3, r3, #7
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f043 0201 	orr.w	r2, r3, #1
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	@ 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3308      	adds	r3, #8
 80006a4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	e853 3f00 	ldrex	r3, [r3]
 80006ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3308      	adds	r3, #8
 80006ba:	69fa      	ldr	r2, [r7, #28]
 80006bc:	61ba      	str	r2, [r7, #24]
 80006be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006c0:	6979      	ldr	r1, [r7, #20]
 80006c2:	69ba      	ldr	r2, [r7, #24]
 80006c4:	e841 2300 	strex	r3, r2, [r1]
 80006c8:	613b      	str	r3, [r7, #16]
   return(result);
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1e7      	bne.n	80006a0 <LL_USART_DisableIT_CTS+0x8>
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3724      	adds	r7, #36	@ 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_GPIO_SetPinMode>:
{
 80006de:	b480      	push	{r7}
 80006e0:	b089      	sub	sp, #36	@ 0x24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	fa93 f3a3 	rbit	r3, r3
 80006f8:	613b      	str	r3, [r7, #16]
  return result;
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2103      	movs	r1, #3
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	401a      	ands	r2, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	fa93 f3a3 	rbit	r3, r3
 8000718:	61bb      	str	r3, [r7, #24]
  return result;
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	fab3 f383 	clz	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	431a      	orrs	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	3724      	adds	r7, #36	@ 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_GPIO_SetPinPull>:
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa93 f3a3 	rbit	r3, r3
 8000756:	613b      	str	r3, [r7, #16]
  return result;
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2103      	movs	r1, #3
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	fa93 f3a3 	rbit	r3, r3
 8000776:	61bb      	str	r3, [r7, #24]
  return result;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	431a      	orrs	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	60da      	str	r2, [r3, #12]
}
 800078e:	bf00      	nop
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <LL_GPIO_ResetOutputPin>:
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fa1f 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f80b 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f8df 	bl	8000984 <MX_GPIO_Init>
  MX_CAN_Init();
 80007c6:	f000 f853 	bl	8000870 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80007ca:	f000 f887 	bl	80008dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 80007ce:	f7ff fd01 	bl	80001d4 <AppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AppTask();
 80007d2:	f7ff fd05 	bl	80001e0 <AppTask>
 80007d6:	e7fc      	b.n	80007d2 <main+0x1c>

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff ff13 	bl	8000608 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80007e2:	bf00      	nop
 80007e4:	f7ff ff24 	bl	8000630 <LL_FLASH_GetLatency>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d1fa      	bne.n	80007e4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80007ee:	f7ff fdb5 	bl	800035c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007f2:	bf00      	nop
 80007f4:	f7ff fdc2 	bl	800037c <LL_RCC_HSI_IsReady>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d1fa      	bne.n	80007f4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007fe:	2010      	movs	r0, #16
 8000800:	f7ff fdce 	bl	80003a0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_9, LL_RCC_PREDIV_DIV_1);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 800080a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800080e:	f7ff fe7b 	bl	8000508 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000812:	f7ff fe55 	bl	80004c0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000816:	bf00      	nop
 8000818:	f7ff fe62 	bl	80004e0 <LL_RCC_PLL_IsReady>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d1fa      	bne.n	8000818 <SystemClock_Config+0x40>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fdf4 	bl	8000410 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000828:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800082c:	f7ff fe04 	bl	8000438 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fe15 	bl	8000460 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff fdc8 	bl	80003cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800083c:	bf00      	nop
 800083e:	f7ff fdd9 	bl	80003f4 <LL_RCC_GetSysClkSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b08      	cmp	r3, #8
 8000846:	d1fa      	bne.n	800083e <SystemClock_Config+0x66>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <SystemClock_Config+0x94>)
 800084a:	f002 fa07 	bl	8002c5c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fa10 	bl	8000c74 <HAL_InitTick>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800085a:	f000 f8f5 	bl	8000a48 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800085e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000862:	f7ff fe11 	bl	8000488 <LL_RCC_SetUSARTClockSource>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	044aa200 	.word	0x044aa200

08000870 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_CAN_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <MX_CAN_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_CAN_Init+0x64>)
 800087c:	2208      	movs	r2, #8
 800087e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_CAN_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_CAN_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_CAN_Init+0x64>)
 800088e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000892:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_CAN_Init+0x64>)
 8000896:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800089a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_CAN_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_CAN_Init+0x64>)
 80008c2:	f000 fa1b 	bl	8000cfc <HAL_CAN_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f8bc 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000038 	.word	0x20000038
 80008d8:	40006400 	.word	0x40006400

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000906:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800090a:	f7ff fe35 	bl	8000578 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800090e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000912:	f7ff fe19 	bl	8000548 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000916:	230c      	movs	r3, #12
 8000918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800091a:	2302      	movs	r3, #2
 800091c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800092a:	2307      	movs	r3, #7
 800092c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f001 fd6e 	bl	8002416 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800093a:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800093e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800094c:	230c      	movs	r3, #12
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0xa4>)
 8000960:	f002 f8fe 	bl	8002b60 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000964:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0xa4>)
 8000966:	f7ff fe97 	bl	8000698 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0xa4>)
 800096c:	f7ff fe7e 	bl	800066c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_USART2_UART_Init+0xa4>)
 8000972:	f7ff fe6b 	bl	800064c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3738      	adds	r7, #56	@ 0x38
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80009a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80009aa:	f7ff fdcd 	bl	8000548 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80009ae:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80009b2:	f7ff fdc9 	bl	8000548 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80009b6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009ba:	f7ff fdc5 	bl	8000548 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009be:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80009c2:	f7ff fdc1 	bl	8000548 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80009c6:	2120      	movs	r1, #32
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009cc:	f7ff fee5 	bl	800079a <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80009d0:	491b      	ldr	r1, [pc, #108]	@ (8000a40 <MX_GPIO_Init+0xbc>)
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff fde8 	bl	80005a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009de:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <MX_GPIO_Init+0xc0>)
 80009e0:	f7ff feac 	bl	800073c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ea:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <MX_GPIO_Init+0xc0>)
 80009ec:	f7ff fe77 	bl	80006de <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80009f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fb0b 	bl	800202c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000a16:	2320      	movs	r3, #32
 8000a18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f001 fcf0 	bl	8002416 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	00f00003 	.word	0x00f00003
 8000a44:	48000800 	.word	0x48000800

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_MspInit+0x44>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	f000 fe08 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <HAL_CAN_MspInit+0x7c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d128      	bne.n	8000b10 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000ac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_CAN_MspInit+0x80>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b00:	2309      	movs	r3, #9
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_CAN_MspInit+0x84>)
 8000b0c:	f000 ffd4 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40006400 	.word	0x40006400
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f8ab 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f003 fd2f 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fdec 	bl	80007b6 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bec:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 8000bf0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bf4:	200005e8 	.word	0x200005e8

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fd47 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f82e 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff ff1c 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c32:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_DeInit+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000c56:	f000 f805 	bl	8000c64 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fd2b 	bl	80016ee <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 fd01 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000060 	.word	0x20000060

08000cfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0ed      	b.n	8000eea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff febe 	bl	8000a9c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0201 	orr.w	r2, r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d30:	f002 fd7e 	bl	8003830 <HAL_GetTick>
 8000d34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d36:	e012      	b.n	8000d5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d38:	f002 fd7a 	bl	8003830 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d90b      	bls.n	8000d5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2205      	movs	r2, #5
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0c5      	b.n	8000eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0e5      	beq.n	8000d38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0202 	bic.w	r2, r2, #2
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7c:	f002 fd58 	bl	8003830 <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d82:	e012      	b.n	8000daa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d84:	f002 fd54 	bl	8003830 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d90b      	bls.n	8000daa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2205      	movs	r2, #5
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e09f      	b.n	8000eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e5      	bne.n	8000d84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7e1b      	ldrb	r3, [r3, #24]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e007      	b.n	8000de2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7e5b      	ldrb	r3, [r3, #25]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d108      	bne.n	8000dfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7e9b      	ldrb	r3, [r3, #26]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0220 	orr.w	r2, r2, #32
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e007      	b.n	8000e36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0220 	bic.w	r2, r2, #32
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7edb      	ldrb	r3, [r3, #27]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d108      	bne.n	8000e50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0210 	bic.w	r2, r2, #16
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0210 	orr.w	r2, r2, #16
 8000e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7f1b      	ldrb	r3, [r3, #28]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d108      	bne.n	8000e7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0208 	orr.w	r2, r2, #8
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0208 	bic.w	r2, r2, #8
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7f5b      	ldrb	r3, [r3, #29]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0204 	orr.w	r2, r2, #4
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0204 	bic.w	r2, r2, #4
 8000eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	ea42 0103 	orr.w	r1, r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b087      	sub	sp, #28
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f0a:	7cfb      	ldrb	r3, [r7, #19]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <HAL_CAN_ConfigFilter+0x26>
 8000f10:	7cfb      	ldrb	r3, [r7, #19]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f040 80aa 	bne.w	800106c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f1e:	f043 0201 	orr.w	r2, r3, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d123      	bne.n	8000f9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3248      	adds	r2, #72	@ 0x48
 8000f7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f90:	6979      	ldr	r1, [r7, #20]
 8000f92:	3348      	adds	r3, #72	@ 0x48
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d122      	bne.n	8000fe8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	431a      	orrs	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3248      	adds	r2, #72	@ 0x48
 8000fc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fde:	6979      	ldr	r1, [r7, #20]
 8000fe0:	3348      	adds	r3, #72	@ 0x48
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001002:	e007      	b.n	8001014 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800102e:	e007      	b.n	8001040 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	431a      	orrs	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800105e:	f023 0201 	bic.w	r2, r3, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	e006      	b.n	800107a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001070:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
  }
}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d12e      	bne.n	80010f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2202      	movs	r2, #2
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b2:	f002 fbbd 	bl	8003830 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b8:	e012      	b.n	80010e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ba:	f002 fbb9 	bl	8003830 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	d90b      	bls.n	80010e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2205      	movs	r2, #5
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e012      	b.n	8001106 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e5      	bne.n	80010ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e006      	b.n	8001106 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
  }
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800110e:	b480      	push	{r7}
 8001110:	b089      	sub	sp, #36	@ 0x24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d003      	beq.n	800113a <HAL_CAN_AddTxMessage+0x2c>
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b02      	cmp	r3, #2
 8001136:	f040 80ad 	bne.w	8001294 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8095 	beq.w	8001284 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	0e1b      	lsrs	r3, r3, #24
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001164:	2201      	movs	r2, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	409a      	lsls	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001180:	68f9      	ldr	r1, [r7, #12]
 8001182:	6809      	ldr	r1, [r1, #0]
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3318      	adds	r3, #24
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	440b      	add	r3, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e00f      	b.n	80011b2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3318      	adds	r3, #24
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	440b      	add	r3, r1
 80011b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3318      	adds	r3, #24
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	3304      	adds	r3, #4
 80011c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	7d1b      	ldrb	r3, [r3, #20]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d111      	bne.n	80011f2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3318      	adds	r3, #24
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	6811      	ldr	r1, [r2, #0]
 80011e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3318      	adds	r3, #24
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	440b      	add	r3, r1
 80011ee:	3304      	adds	r3, #4
 80011f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3307      	adds	r3, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	061a      	lsls	r2, r3, #24
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3306      	adds	r3, #6
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3305      	adds	r3, #5
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	4313      	orrs	r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	3204      	adds	r2, #4
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	4610      	mov	r0, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	ea43 0200 	orr.w	r2, r3, r0
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	440b      	add	r3, r1
 8001224:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001228:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3303      	adds	r3, #3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	061a      	lsls	r2, r3, #24
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3302      	adds	r3, #2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	4313      	orrs	r3, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	4610      	mov	r0, r2
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	6811      	ldr	r1, [r2, #0]
 8001250:	ea43 0200 	orr.w	r2, r3, r0
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	440b      	add	r3, r1
 800125a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800125e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3318      	adds	r3, #24
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6811      	ldr	r1, [r2, #0]
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3318      	adds	r3, #24
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	440b      	add	r3, r1
 800127e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e00e      	b.n	80012a2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e006      	b.n	80012a2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d002      	beq.n	80012d0 <HAL_CAN_IsTxMessagePending+0x22>
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d10b      	bne.n	80012e8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	069b      	lsls	r3, r3, #26
 80012da:	401a      	ands	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012f6:	b480      	push	{r7}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <HAL_CAN_GetRxMessage+0x24>
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b02      	cmp	r3, #2
 8001316:	f040 8103 	bne.w	8001520 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10e      	bne.n	800133e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0f7      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0e8      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0204 	and.w	r2, r3, #4
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	331b      	adds	r3, #27
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0d5b      	lsrs	r3, r3, #21
 800138a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e00b      	b.n	80013ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	331b      	adds	r3, #27
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0202 	and.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	331b      	adds	r3, #27
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2208      	movs	r2, #8
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	e00b      	b.n	80013fa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	331b      	adds	r3, #27
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 020f 	and.w	r2, r3, #15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	331b      	adds	r3, #27
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3302      	adds	r3, #2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e1a      	lsrs	r2, r3, #24
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3303      	adds	r3, #3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0a1a      	lsrs	r2, r3, #8
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3305      	adds	r3, #5
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1a      	lsrs	r2, r3, #16
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3306      	adds	r3, #6
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0e1a      	lsrs	r2, r3, #24
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3307      	adds	r3, #7
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e007      	b.n	800151c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	e006      	b.n	800152e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff47 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff5c 	bl	8001584 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffb0 	bl	800165c <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <HAL_FLASH_Program+0xd8>)
 8001724:	7e1b      	ldrb	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_FLASH_Program+0x26>
 800172a:	2302      	movs	r3, #2
 800172c:	e054      	b.n	80017d8 <HAL_FLASH_Program+0xd0>
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <HAL_FLASH_Program+0xd8>)
 8001730:	2201      	movs	r2, #1
 8001732:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001738:	f000 f8a8 	bl	800188c <FLASH_WaitForLastOperation>
 800173c:	4603      	mov	r3, r0
 800173e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d144      	bne.n	80017d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d102      	bne.n	8001752 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800174c:	2301      	movs	r3, #1
 800174e:	757b      	strb	r3, [r7, #21]
 8001750:	e007      	b.n	8001762 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d102      	bne.n	800175e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001758:	2302      	movs	r3, #2
 800175a:	757b      	strb	r3, [r7, #21]
 800175c:	e001      	b.n	8001762 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800175e:	2304      	movs	r3, #4
 8001760:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001762:	2300      	movs	r3, #0
 8001764:	75bb      	strb	r3, [r7, #22]
 8001766:	e02d      	b.n	80017c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001768:	7dbb      	ldrb	r3, [r7, #22]
 800176a:	005a      	lsls	r2, r3, #1
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	eb02 0c03 	add.w	ip, r2, r3
 8001772:	7dbb      	ldrb	r3, [r7, #22]
 8001774:	0119      	lsls	r1, r3, #4
 8001776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800177a:	f1c1 0620 	rsb	r6, r1, #32
 800177e:	f1a1 0020 	sub.w	r0, r1, #32
 8001782:	fa22 f401 	lsr.w	r4, r2, r1
 8001786:	fa03 f606 	lsl.w	r6, r3, r6
 800178a:	4334      	orrs	r4, r6
 800178c:	fa23 f000 	lsr.w	r0, r3, r0
 8001790:	4304      	orrs	r4, r0
 8001792:	fa23 f501 	lsr.w	r5, r3, r1
 8001796:	b2a3      	uxth	r3, r4
 8001798:	4619      	mov	r1, r3
 800179a:	4660      	mov	r0, ip
 800179c:	f000 f85a 	bl	8001854 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017a4:	f000 f872 	bl	800188c <FLASH_WaitForLastOperation>
 80017a8:	4603      	mov	r3, r0
 80017aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_FLASH_Program+0xdc>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <HAL_FLASH_Program+0xdc>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d107      	bne.n	80017ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80017be:	7dbb      	ldrb	r3, [r7, #22]
 80017c0:	3301      	adds	r3, #1
 80017c2:	75bb      	strb	r3, [r7, #22]
 80017c4:	7dba      	ldrb	r2, [r7, #22]
 80017c6:	7d7b      	ldrb	r3, [r7, #21]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3cd      	bcc.n	8001768 <HAL_FLASH_Program+0x60>
 80017cc:	e000      	b.n	80017d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80017ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <HAL_FLASH_Program+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	761a      	strb	r2, [r3, #24]

  return status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e0:	20000068 	.word	0x20000068
 80017e4:	40022000 	.word	0x40022000

080017e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_FLASH_Unlock+0x40>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_FLASH_Unlock+0x40>)
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <HAL_FLASH_Unlock+0x44>)
 8001802:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_FLASH_Unlock+0x40>)
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_FLASH_Unlock+0x48>)
 8001808:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <HAL_FLASH_Unlock+0x40>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800181a:	79fb      	ldrb	r3, [r7, #7]
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40022000 	.word	0x40022000
 800182c:	45670123 	.word	0x45670123
 8001830:	cdef89ab 	.word	0xcdef89ab

08001834 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_FLASH_Lock+0x1c>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <HAL_FLASH_Lock+0x1c>)
 800183e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001842:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40022000 	.word	0x40022000

08001854 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <FLASH_Program_HalfWord+0x30>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <FLASH_Program_HalfWord+0x34>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <FLASH_Program_HalfWord+0x34>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	887a      	ldrh	r2, [r7, #2]
 8001876:	801a      	strh	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000068 	.word	0x20000068
 8001888:	40022000 	.word	0x40022000

0800188c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001894:	f001 ffcc 	bl	8003830 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800189a:	e010      	b.n	80018be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d00c      	beq.n	80018be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <FLASH_WaitForLastOperation+0x2e>
 80018aa:	f001 ffc1 	bl	8003830 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d201      	bcs.n	80018be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e01f      	b.n	80018fe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <FLASH_WaitForLastOperation+0x7c>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d0e8      	beq.n	800189c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <FLASH_WaitForLastOperation+0x7c>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d102      	bne.n	80018dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <FLASH_WaitForLastOperation+0x7c>)
 80018d8:	2220      	movs	r2, #32
 80018da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <FLASH_WaitForLastOperation+0x7c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d005      	beq.n	80018f4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <FLASH_WaitForLastOperation+0x7c>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d103      	bne.n	80018fc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018f4:	f000 f80a 	bl	800190c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000

0800190c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <FLASH_SetErrorCode+0x5c>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b10      	cmp	r3, #16
 8001920:	d109      	bne.n	8001936 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <FLASH_SetErrorCode+0x60>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	4a10      	ldr	r2, [pc, #64]	@ (800196c <FLASH_SetErrorCode+0x60>)
 800192c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <FLASH_SetErrorCode+0x5c>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b04      	cmp	r3, #4
 8001940:	d109      	bne.n	8001956 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <FLASH_SetErrorCode+0x60>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <FLASH_SetErrorCode+0x60>)
 800194c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001956:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <FLASH_SetErrorCode+0x5c>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60d3      	str	r3, [r2, #12]
}  
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40022000 	.word	0x40022000
 800196c:	20000068 	.word	0x20000068

08001970 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <HAL_FLASHEx_Erase+0xcc>)
 8001984:	7e1b      	ldrb	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_FLASHEx_Erase+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e052      	b.n	8001a34 <HAL_FLASHEx_Erase+0xc4>
 800198e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <HAL_FLASHEx_Erase+0xcc>)
 8001990:	2201      	movs	r2, #1
 8001992:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d115      	bne.n	80019c8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800199c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019a0:	f7ff ff74 	bl	800188c <FLASH_WaitForLastOperation>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d140      	bne.n	8001a2c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80019aa:	f000 f84b 	bl	8001a44 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019b2:	f7ff ff6b 	bl	800188c <FLASH_WaitForLastOperation>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_FLASHEx_Erase+0xd0>)
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <HAL_FLASHEx_Erase+0xd0>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6113      	str	r3, [r2, #16]
 80019c6:	e031      	b.n	8001a2c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019cc:	f7ff ff5e 	bl	800188c <FLASH_WaitForLastOperation>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d12a      	bne.n	8001a2c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	e019      	b.n	8001a1a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80019e6:	68b8      	ldr	r0, [r7, #8]
 80019e8:	f000 f846 	bl	8001a78 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019f0:	f7ff ff4c 	bl	800188c <FLASH_WaitForLastOperation>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <HAL_FLASHEx_Erase+0xd0>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4a10      	ldr	r2, [pc, #64]	@ (8001a40 <HAL_FLASHEx_Erase+0xd0>)
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]
            break;
 8001a10:	e00c      	b.n	8001a2c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a18:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	02da      	lsls	r2, r3, #11
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3dc      	bcc.n	80019e6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_FLASHEx_Erase+0xcc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	761a      	strb	r2, [r3, #24]

  return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000068 	.word	0x20000068
 8001a40:	40022000 	.word	0x40022000

08001a44 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <FLASH_MassErase+0x2c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <FLASH_MassErase+0x30>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a08      	ldr	r2, [pc, #32]	@ (8001a74 <FLASH_MassErase+0x30>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <FLASH_MassErase+0x30>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <FLASH_MassErase+0x30>)
 8001a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a64:	6113      	str	r3, [r2, #16]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000068 	.word	0x20000068
 8001a74:	40022000 	.word	0x40022000

08001a78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <FLASH_PageErase+0x38>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <FLASH_PageErase+0x3c>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <FLASH_PageErase+0x3c>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <FLASH_PageErase+0x3c>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <FLASH_PageErase+0x3c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <FLASH_PageErase+0x3c>)
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aa2:	6113      	str	r3, [r2, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000068 	.word	0x20000068
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e160      	b.n	8001d8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8152 	beq.w	8001d84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d005      	beq.n	8001af8 <HAL_GPIO_Init+0x40>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 0201 	and.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d017      	beq.n	8001b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d123      	bne.n	8001bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80ac 	beq.w	8001d84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	@ (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b5b      	ldr	r3, [pc, #364]	@ (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c44:	4a59      	ldr	r2, [pc, #356]	@ (8001dac <HAL_GPIO_Init+0x2f4>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c6e:	d025      	beq.n	8001cbc <HAL_GPIO_Init+0x204>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4f      	ldr	r2, [pc, #316]	@ (8001db0 <HAL_GPIO_Init+0x2f8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d01f      	beq.n	8001cb8 <HAL_GPIO_Init+0x200>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001db4 <HAL_GPIO_Init+0x2fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d019      	beq.n	8001cb4 <HAL_GPIO_Init+0x1fc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a4d      	ldr	r2, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x300>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8001dbc <HAL_GPIO_Init+0x304>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1f4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_GPIO_Init+0x308>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1ec>
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	e00c      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	e00a      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e008      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e006      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e004      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_GPIO_Init+0x206>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	f002 0203 	and.w	r2, r2, #3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cce:	4937      	ldr	r1, [pc, #220]	@ (8001dac <HAL_GPIO_Init+0x2f4>)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d00:	4a31      	ldr	r2, [pc, #196]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d06:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d2a:	4a27      	ldr	r2, [pc, #156]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d54:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <HAL_GPIO_Init+0x310>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae97 	bne.w	8001ac8 <HAL_GPIO_Init+0x10>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000c00 	.word	0x48000c00
 8001dbc:	48001000 	.word	0x48001000
 8001dc0:	48001400 	.word	0x48001400
 8001dc4:	48001800 	.word	0x48001800
 8001dc8:	40010400 	.word	0x40010400

08001dcc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <LL_EXTI_EnableIT_0_31+0x20>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <LL_EXTI_EnableIT_0_31+0x20>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <LL_EXTI_EnableIT_32_63+0x20>)
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4904      	ldr	r1, [pc, #16]	@ (8001e10 <LL_EXTI_EnableIT_32_63+0x20>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	620b      	str	r3, [r1, #32]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40010400 	.word	0x40010400

08001e14 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4904      	ldr	r1, [pc, #16]	@ (8001e38 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010400 	.word	0x40010400

08001e3c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <LL_EXTI_DisableIT_32_63+0x24>)
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4904      	ldr	r1, [pc, #16]	@ (8001e60 <LL_EXTI_DisableIT_32_63+0x24>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	620b      	str	r3, [r1, #32]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400

08001e64 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40010400 	.word	0x40010400

08001e88 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e94:	4904      	ldr	r1, [pc, #16]	@ (8001ea8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40010400 	.word	0x40010400

08001eac <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4904      	ldr	r1, [pc, #16]	@ (8001ed0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4904      	ldr	r1, [pc, #16]	@ (8001ef8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010400 	.word	0x40010400

08001efc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4904      	ldr	r1, [pc, #16]	@ (8001f1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]

}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40010400 	.word	0x40010400

08001f20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f2c:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40010400 	.word	0x40010400

08001f44 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4904      	ldr	r1, [pc, #16]	@ (8001f68 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]

}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010400 	.word	0x40010400

08001f6c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4904      	ldr	r1, [pc, #16]	@ (8001f90 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010400 	.word	0x40010400

08001f94 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4904      	ldr	r1, [pc, #16]	@ (8001fb4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc4:	4904      	ldr	r1, [pc, #16]	@ (8001fd8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40010400 	.word	0x40010400

08001fdc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4904      	ldr	r1, [pc, #16]	@ (8002000 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010400 	.word	0x40010400

08002004 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800200e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	43db      	mvns	r3, r3
 8002014:	4904      	ldr	r1, [pc, #16]	@ (8002028 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002016:	4013      	ands	r3, r2
 8002018:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010400 	.word	0x40010400

0800202c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7a1b      	ldrb	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80cc 	beq.w	80021da <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d061      	beq.n	800210e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7a5b      	ldrb	r3, [r3, #9]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d01c      	beq.n	800208c <LL_EXTI_Init+0x60>
 8002052:	2b02      	cmp	r3, #2
 8002054:	dc25      	bgt.n	80020a2 <LL_EXTI_Init+0x76>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <LL_EXTI_Init+0x34>
 800205a:	2b01      	cmp	r3, #1
 800205c:	d00b      	beq.n	8002076 <LL_EXTI_Init+0x4a>
 800205e:	e020      	b.n	80020a2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff21 	bl	8001eac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff feac 	bl	8001dcc <LL_EXTI_EnableIT_0_31>
          break;
 8002074:	e018      	b.n	80020a8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff feca 	bl	8001e14 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff feed 	bl	8001e64 <LL_EXTI_EnableEvent_0_31>
          break;
 800208a:	e00d      	b.n	80020a8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fe9b 	bl	8001dcc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fee2 	bl	8001e64 <LL_EXTI_EnableEvent_0_31>
          break;
 80020a0:	e002      	b.n	80020a8 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
          break;
 80020a6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7a9b      	ldrb	r3, [r3, #10]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02e      	beq.n	800210e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7a9b      	ldrb	r3, [r3, #10]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d01c      	beq.n	80020f2 <LL_EXTI_Init+0xc6>
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	dc25      	bgt.n	8002108 <LL_EXTI_Init+0xdc>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d002      	beq.n	80020c6 <LL_EXTI_Init+0x9a>
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d00b      	beq.n	80020dc <LL_EXTI_Init+0xb0>
 80020c4:	e020      	b.n	8002108 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff86 	bl	8001fdc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff11 	bl	8001efc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80020da:	e018      	b.n	800210e <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff2f 	bl	8001f44 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff52 	bl	8001f94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80020f0:	e00d      	b.n	800210e <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff00 	bl	8001efc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff47 	bl	8001f94 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002106:	e002      	b.n	800210e <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
            break;
 800210c:	bf00      	nop
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d075      	beq.n	8002202 <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7a5b      	ldrb	r3, [r3, #9]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d01c      	beq.n	8002158 <LL_EXTI_Init+0x12c>
 800211e:	2b02      	cmp	r3, #2
 8002120:	dc25      	bgt.n	800216e <LL_EXTI_Init+0x142>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <LL_EXTI_Init+0x100>
 8002126:	2b01      	cmp	r3, #1
 8002128:	d00b      	beq.n	8002142 <LL_EXTI_Init+0x116>
 800212a:	e020      	b.n	800216e <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fecf 	bl	8001ed4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe58 	bl	8001df0 <LL_EXTI_EnableIT_32_63>
          break;
 8002140:	e018      	b.n	8002174 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fe78 	bl	8001e3c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fe99 	bl	8001e88 <LL_EXTI_EnableEvent_32_63>
          break;
 8002156:	e00d      	b.n	8002174 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fe47 	bl	8001df0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe8e 	bl	8001e88 <LL_EXTI_EnableEvent_32_63>
          break;
 800216c:	e002      	b.n	8002174 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
          break;
 8002172:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7a9b      	ldrb	r3, [r3, #10]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d042      	beq.n	8002202 <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7a9b      	ldrb	r3, [r3, #10]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d01c      	beq.n	80021be <LL_EXTI_Init+0x192>
 8002184:	2b03      	cmp	r3, #3
 8002186:	dc25      	bgt.n	80021d4 <LL_EXTI_Init+0x1a8>
 8002188:	2b01      	cmp	r3, #1
 800218a:	d002      	beq.n	8002192 <LL_EXTI_Init+0x166>
 800218c:	2b02      	cmp	r3, #2
 800218e:	d00b      	beq.n	80021a8 <LL_EXTI_Init+0x17c>
 8002190:	e020      	b.n	80021d4 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff34 	bl	8002004 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff febd 	bl	8001f20 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80021a6:	e02c      	b.n	8002202 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fedd 	bl	8001f6c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fefe 	bl	8001fb8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80021bc:	e021      	b.n	8002202 <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff feac 	bl	8001f20 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fef3 	bl	8001fb8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80021d2:	e016      	b.n	8002202 <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
            break;
 80021d8:	e013      	b.n	8002202 <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fe18 	bl	8001e14 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe5f 	bl	8001eac <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fe22 	bl	8001e3c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe69 	bl	8001ed4 <LL_EXTI_DisableEvent_32_63>
#endif
  }
  return status;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <LL_GPIO_SetPinMode>:
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	613b      	str	r3, [r7, #16]
  return result;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2103      	movs	r1, #3
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	61bb      	str	r3, [r7, #24]
  return result;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_GPIO_SetPinOutputType>:
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_GPIO_SetPinSpeed>:
{
 800229a:	b480      	push	{r7}
 800229c:	b089      	sub	sp, #36	@ 0x24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	613b      	str	r3, [r7, #16]
  return result;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2103      	movs	r1, #3
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	401a      	ands	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	61bb      	str	r3, [r7, #24]
  return result;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	431a      	orrs	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_GPIO_SetPinPull>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	613b      	str	r3, [r7, #16]
  return result;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2103      	movs	r1, #3
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	61bb      	str	r3, [r7, #24]
  return result;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	60da      	str	r2, [r3, #12]
}
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_GPIO_SetAFPin_0_7>:
{
 8002356:	b480      	push	{r7}
 8002358:	b089      	sub	sp, #36	@ 0x24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	613b      	str	r3, [r7, #16]
  return result;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	210f      	movs	r1, #15
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	61bb      	str	r3, [r7, #24]
  return result;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	bf00      	nop
 80023aa:	3724      	adds	r7, #36	@ 0x24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_GPIO_SetAFPin_8_15>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	@ 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	613b      	str	r3, [r7, #16]
  return result;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	210f      	movs	r1, #15
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	401a      	ands	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	61bb      	str	r3, [r7, #24]
  return result;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b088      	sub	sp, #32
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	613b      	str	r3, [r7, #16]
  return result;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002438:	e051      	b.n	80024de <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d043      	beq.n	80024d8 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d003      	beq.n	8002460 <LL_GPIO_Init+0x4a>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10e      	bne.n	800247e <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	461a      	mov	r2, r3
 8002466:	69b9      	ldr	r1, [r7, #24]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff16 	bl	800229a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fef6 	bl	800226a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	461a      	mov	r2, r3
 8002484:	69b9      	ldr	r1, [r7, #24]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff36 	bl	80022f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d11a      	bne.n	80024ca <LL_GPIO_Init+0xb4>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	60bb      	str	r3, [r7, #8]
  return result;
 80024a0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d807      	bhi.n	80024bc <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	461a      	mov	r2, r3
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff4e 	bl	8002356 <LL_GPIO_SetAFPin_0_7>
 80024ba:	e006      	b.n	80024ca <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	461a      	mov	r2, r3
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff75 	bl	80023b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fe9a 	bl	800220c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	3301      	adds	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1a6      	bne.n	800243a <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <LL_RCC_HSI_IsReady>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <LL_RCC_HSI_IsReady+0x20>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40021000 	.word	0x40021000

0800251c <LL_RCC_LSE_IsReady>:
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <LL_RCC_LSE_IsReady+0x20>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000

08002540 <LL_RCC_GetSysClkSource>:
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <LL_RCC_GetSysClkSource+0x18>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <LL_RCC_GetAHBPrescaler>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <LL_RCC_GetAHBPrescaler+0x18>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <LL_RCC_GetAPB1Prescaler>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <LL_RCC_GetAPB1Prescaler+0x18>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <LL_RCC_GetAPB2Prescaler>:
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <LL_RCC_GetAPB2Prescaler+0x18>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <LL_RCC_GetUSARTClockSource>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80025b8:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <LL_RCC_GetUSARTClockSource+0x28>)
 80025ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025bc:	2103      	movs	r1, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	4313      	orrs	r3, r2
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000

080025dc <LL_RCC_GetUARTClockSource>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <LL_RCC_GetUARTClockSource+0x24>)
 80025e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	4313      	orrs	r3, r2
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <LL_RCC_PLL_GetMainSource+0x18>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <LL_RCC_PLL_GetPrediv+0x18>)
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	f003 030f 	and.w	r3, r3, #15
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002660:	f000 f96a 	bl	8002938 <RCC_GetSystemClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f988 	bl	8002984 <RCC_GetHCLKClockFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f996 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f9a2 	bl	80029d8 <RCC_GetPCLK2ClockFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d130      	bne.n	8002718 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff7a 	bl	80025b0 <LL_RCC_GetUSARTClockSource>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d00a      	beq.n	80026d8 <LL_RCC_GetUSARTClockFreq+0x34>
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d819      	bhi.n	80026fa <LL_RCC_GetUSARTClockFreq+0x56>
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d002      	beq.n	80026d0 <LL_RCC_GetUSARTClockFreq+0x2c>
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d00c      	beq.n	80026e8 <LL_RCC_GetUSARTClockFreq+0x44>
 80026ce:	e014      	b.n	80026fa <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80026d0:	f000 f932 	bl	8002938 <RCC_GetSystemClockFreq>
 80026d4:	60f8      	str	r0, [r7, #12]
        break;
 80026d6:	e01f      	b.n	8002718 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80026d8:	f7ff ff0e 	bl	80024f8 <LL_RCC_HSI_IsReady>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d017      	beq.n	8002712 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80026e2:	4b48      	ldr	r3, [pc, #288]	@ (8002804 <LL_RCC_GetUSARTClockFreq+0x160>)
 80026e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026e6:	e014      	b.n	8002712 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80026e8:	f7ff ff18 	bl	800251c <LL_RCC_LSE_IsReady>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80026f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026f8:	e00d      	b.n	8002716 <LL_RCC_GetUSARTClockFreq+0x72>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026fa:	f000 f91d 	bl	8002938 <RCC_GetSystemClockFreq>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f93f 	bl	8002984 <RCC_GetHCLKClockFreq>
 8002706:	4603      	mov	r3, r0
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f965 	bl	80029d8 <RCC_GetPCLK2ClockFreq>
 800270e:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002710:	e002      	b.n	8002718 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002716:	bf00      	nop
    }
  }
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d134      	bne.n	8002788 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff46 	bl	80025b0 <LL_RCC_GetUSARTClockSource>
 8002724:	4603      	mov	r3, r0
 8002726:	4a38      	ldr	r2, [pc, #224]	@ (8002808 <LL_RCC_GetUSARTClockFreq+0x164>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00d      	beq.n	8002748 <LL_RCC_GetUSARTClockFreq+0xa4>
 800272c:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <LL_RCC_GetUSARTClockFreq+0x164>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d81b      	bhi.n	800276a <LL_RCC_GetUSARTClockFreq+0xc6>
 8002732:	4a36      	ldr	r2, [pc, #216]	@ (800280c <LL_RCC_GetUSARTClockFreq+0x168>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <LL_RCC_GetUSARTClockFreq+0x9c>
 8002738:	4a35      	ldr	r2, [pc, #212]	@ (8002810 <LL_RCC_GetUSARTClockFreq+0x16c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00c      	beq.n	8002758 <LL_RCC_GetUSARTClockFreq+0xb4>
 800273e:	e014      	b.n	800276a <LL_RCC_GetUSARTClockFreq+0xc6>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002740:	f000 f8fa 	bl	8002938 <RCC_GetSystemClockFreq>
 8002744:	60f8      	str	r0, [r7, #12]
        break;
 8002746:	e01f      	b.n	8002788 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002748:	f7ff fed6 	bl	80024f8 <LL_RCC_HSI_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <LL_RCC_GetUSARTClockFreq+0xde>
        {
          usart_frequency = HSI_VALUE;
 8002752:	4b2c      	ldr	r3, [pc, #176]	@ (8002804 <LL_RCC_GetUSARTClockFreq+0x160>)
 8002754:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002756:	e014      	b.n	8002782 <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002758:	f7ff fee0 	bl	800251c <LL_RCC_LSE_IsReady>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d011      	beq.n	8002786 <LL_RCC_GetUSARTClockFreq+0xe2>
        {
          usart_frequency = LSE_VALUE;
 8002762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002766:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002768:	e00d      	b.n	8002786 <LL_RCC_GetUSARTClockFreq+0xe2>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800276a:	f000 f8e5 	bl	8002938 <RCC_GetSystemClockFreq>
 800276e:	4603      	mov	r3, r0
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f907 	bl	8002984 <RCC_GetHCLKClockFreq>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f919 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 800277e:	60f8      	str	r0, [r7, #12]
        break;
 8002780:	e002      	b.n	8002788 <LL_RCC_GetUSARTClockFreq+0xe4>
        break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <LL_RCC_GetUSARTClockFreq+0xe4>
        break;
 8002786:	bf00      	nop
    }
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b12      	cmp	r3, #18
 800278c:	d134      	bne.n	80027f8 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff0e 	bl	80025b0 <LL_RCC_GetUSARTClockSource>
 8002794:	4603      	mov	r3, r0
 8002796:	4a1f      	ldr	r2, [pc, #124]	@ (8002814 <LL_RCC_GetUSARTClockFreq+0x170>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <LL_RCC_GetUSARTClockFreq+0x114>
 800279c:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <LL_RCC_GetUSARTClockFreq+0x170>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d81b      	bhi.n	80027da <LL_RCC_GetUSARTClockFreq+0x136>
 80027a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <LL_RCC_GetUSARTClockFreq+0x174>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <LL_RCC_GetUSARTClockFreq+0x10c>
 80027a8:	4a1c      	ldr	r2, [pc, #112]	@ (800281c <LL_RCC_GetUSARTClockFreq+0x178>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00c      	beq.n	80027c8 <LL_RCC_GetUSARTClockFreq+0x124>
 80027ae:	e014      	b.n	80027da <LL_RCC_GetUSARTClockFreq+0x136>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80027b0:	f000 f8c2 	bl	8002938 <RCC_GetSystemClockFreq>
 80027b4:	60f8      	str	r0, [r7, #12]
        break;
 80027b6:	e01f      	b.n	80027f8 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80027b8:	f7ff fe9e 	bl	80024f8 <LL_RCC_HSI_IsReady>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <LL_RCC_GetUSARTClockFreq+0x14e>
        {
          usart_frequency = HSI_VALUE;
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <LL_RCC_GetUSARTClockFreq+0x160>)
 80027c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027c6:	e014      	b.n	80027f2 <LL_RCC_GetUSARTClockFreq+0x14e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80027c8:	f7ff fea8 	bl	800251c <LL_RCC_LSE_IsReady>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <LL_RCC_GetUSARTClockFreq+0x152>
        {
          usart_frequency = LSE_VALUE;
 80027d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027d8:	e00d      	b.n	80027f6 <LL_RCC_GetUSARTClockFreq+0x152>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027da:	f000 f8ad 	bl	8002938 <RCC_GetSystemClockFreq>
 80027de:	4603      	mov	r3, r0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f8cf 	bl	8002984 <RCC_GetHCLKClockFreq>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f8e1 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 80027ee:	60f8      	str	r0, [r7, #12]
        break;
 80027f0:	e002      	b.n	80027f8 <LL_RCC_GetUSARTClockFreq+0x154>
        break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <LL_RCC_GetUSARTClockFreq+0x154>
        break;
 80027f6:	bf00      	nop
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	007a1200 	.word	0x007a1200
 8002808:	10030000 	.word	0x10030000
 800280c:	10010000 	.word	0x10010000
 8002810:	10020000 	.word	0x10020000
 8002814:	120c0000 	.word	0x120c0000
 8002818:	12040000 	.word	0x12040000
 800281c:	12080000 	.word	0x12080000

08002820 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002832:	d134      	bne.n	800289e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fed1 	bl	80025dc <LL_RCC_GetUARTClockSource>
 800283a:	4603      	mov	r3, r0
 800283c:	4a37      	ldr	r2, [pc, #220]	@ (800291c <LL_RCC_GetUARTClockFreq+0xfc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <LL_RCC_GetUARTClockFreq+0x3e>
 8002842:	4a36      	ldr	r2, [pc, #216]	@ (800291c <LL_RCC_GetUARTClockFreq+0xfc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d81b      	bhi.n	8002880 <LL_RCC_GetUARTClockFreq+0x60>
 8002848:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <LL_RCC_GetUARTClockFreq+0x100>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <LL_RCC_GetUARTClockFreq+0x36>
 800284e:	4a35      	ldr	r2, [pc, #212]	@ (8002924 <LL_RCC_GetUARTClockFreq+0x104>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00c      	beq.n	800286e <LL_RCC_GetUARTClockFreq+0x4e>
 8002854:	e014      	b.n	8002880 <LL_RCC_GetUARTClockFreq+0x60>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002856:	f000 f86f 	bl	8002938 <RCC_GetSystemClockFreq>
 800285a:	60f8      	str	r0, [r7, #12]
        break;
 800285c:	e01f      	b.n	800289e <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800285e:	f7ff fe4b 	bl	80024f8 <LL_RCC_HSI_IsReady>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <LL_RCC_GetUARTClockFreq+0x78>
        {
          uart_frequency = HSI_VALUE;
 8002868:	4b2f      	ldr	r3, [pc, #188]	@ (8002928 <LL_RCC_GetUARTClockFreq+0x108>)
 800286a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800286c:	e014      	b.n	8002898 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800286e:	f7ff fe55 	bl	800251c <LL_RCC_LSE_IsReady>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d011      	beq.n	800289c <LL_RCC_GetUARTClockFreq+0x7c>
        {
          uart_frequency = LSE_VALUE;
 8002878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800287c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800287e:	e00d      	b.n	800289c <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002880:	f000 f85a 	bl	8002938 <RCC_GetSystemClockFreq>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f87c 	bl	8002984 <RCC_GetHCLKClockFreq>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f88e 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 8002894:	60f8      	str	r0, [r7, #12]
        break;
 8002896:	e002      	b.n	800289e <LL_RCC_GetUARTClockFreq+0x7e>
        break;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <LL_RCC_GetUARTClockFreq+0x7e>
        break;
 800289c:	bf00      	nop
    }
  }
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028a4:	d134      	bne.n	8002910 <LL_RCC_GetUARTClockFreq+0xf0>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fe98 	bl	80025dc <LL_RCC_GetUARTClockSource>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <LL_RCC_GetUARTClockFreq+0x10c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <LL_RCC_GetUARTClockFreq+0xb0>
 80028b4:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <LL_RCC_GetUARTClockFreq+0x10c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d81b      	bhi.n	80028f2 <LL_RCC_GetUARTClockFreq+0xd2>
 80028ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <LL_RCC_GetUARTClockFreq+0x110>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <LL_RCC_GetUARTClockFreq+0xa8>
 80028c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <LL_RCC_GetUARTClockFreq+0x114>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00c      	beq.n	80028e0 <LL_RCC_GetUARTClockFreq+0xc0>
 80028c6:	e014      	b.n	80028f2 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80028c8:	f000 f836 	bl	8002938 <RCC_GetSystemClockFreq>
 80028cc:	60f8      	str	r0, [r7, #12]
        break;
 80028ce:	e01f      	b.n	8002910 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80028d0:	f7ff fe12 	bl	80024f8 <LL_RCC_HSI_IsReady>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <LL_RCC_GetUARTClockFreq+0xea>
        {
          uart_frequency = HSI_VALUE;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <LL_RCC_GetUARTClockFreq+0x108>)
 80028dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028de:	e014      	b.n	800290a <LL_RCC_GetUARTClockFreq+0xea>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80028e0:	f7ff fe1c 	bl	800251c <LL_RCC_LSE_IsReady>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d011      	beq.n	800290e <LL_RCC_GetUARTClockFreq+0xee>
        {
          uart_frequency = LSE_VALUE;
 80028ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028f0:	e00d      	b.n	800290e <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80028f2:	f000 f821 	bl	8002938 <RCC_GetSystemClockFreq>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f843 	bl	8002984 <RCC_GetHCLKClockFreq>
 80028fe:	4603      	mov	r3, r0
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f855 	bl	80029b0 <RCC_GetPCLK1ClockFreq>
 8002906:	60f8      	str	r0, [r7, #12]
        break;
 8002908:	e002      	b.n	8002910 <LL_RCC_GetUARTClockFreq+0xf0>
        break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <LL_RCC_GetUARTClockFreq+0xf0>
        break;
 800290e:	bf00      	nop
    }
  }
#endif /* UART5 */

  return uart_frequency;
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	00303000 	.word	0x00303000
 8002920:	00103000 	.word	0x00103000
 8002924:	00203000 	.word	0x00203000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	00c0c000 	.word	0x00c0c000
 8002930:	0040c000 	.word	0x0040c000
 8002934:	0080c000 	.word	0x0080c000

08002938 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002942:	f7ff fdfd 	bl	8002540 <LL_RCC_GetSysClkSource>
 8002946:	4603      	mov	r3, r0
 8002948:	2b08      	cmp	r3, #8
 800294a:	d00c      	beq.n	8002966 <RCC_GetSystemClockFreq+0x2e>
 800294c:	2b08      	cmp	r3, #8
 800294e:	d80e      	bhi.n	800296e <RCC_GetSystemClockFreq+0x36>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <RCC_GetSystemClockFreq+0x22>
 8002954:	2b04      	cmp	r3, #4
 8002956:	d003      	beq.n	8002960 <RCC_GetSystemClockFreq+0x28>
 8002958:	e009      	b.n	800296e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <RCC_GetSystemClockFreq+0x48>)
 800295c:	607b      	str	r3, [r7, #4]
      break;
 800295e:	e009      	b.n	8002974 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <RCC_GetSystemClockFreq+0x48>)
 8002962:	607b      	str	r3, [r7, #4]
      break;
 8002964:	e006      	b.n	8002974 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002966:	f000 f84b 	bl	8002a00 <RCC_PLL_GetFreqDomain_SYS>
 800296a:	6078      	str	r0, [r7, #4]
      break;
 800296c:	e002      	b.n	8002974 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <RCC_GetSystemClockFreq+0x48>)
 8002970:	607b      	str	r3, [r7, #4]
      break;
 8002972:	bf00      	nop
  }

  return frequency;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	007a1200 	.word	0x007a1200

08002984 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800298c:	f7ff fde6 	bl	800255c <LL_RCC_GetAHBPrescaler>
 8002990:	4603      	mov	r3, r0
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <RCC_GetHCLKClockFreq+0x28>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	40d3      	lsrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08004728 	.word	0x08004728

080029b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029b8:	f7ff fdde 	bl	8002578 <LL_RCC_GetAPB1Prescaler>
 80029bc:	4603      	mov	r3, r0
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	40d3      	lsrs	r3, r2
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08004738 	.word	0x08004738

080029d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029e0:	f7ff fdd8 	bl	8002594 <LL_RCC_GetAPB2Prescaler>
 80029e4:	4603      	mov	r3, r0
 80029e6:	0adb      	lsrs	r3, r3, #11
 80029e8:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <RCC_GetPCLK2ClockFreq+0x24>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	40d3      	lsrs	r3, r2
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08004738 	.word	0x08004738

08002a00 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a0e:	f7ff fdf9 	bl	8002604 <LL_RCC_PLL_GetMainSource>
 8002a12:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1a:	d004      	beq.n	8002a26 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a22:	d003      	beq.n	8002a2c <RCC_PLL_GetFreqDomain_SYS+0x2c>
 8002a24:	e005      	b.n	8002a32 <RCC_PLL_GetFreqDomain_SYS+0x32>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8002a28:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a2a:	e005      	b.n	8002a38 <RCC_PLL_GetFreqDomain_SYS+0x38>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8002a2e:	60fb      	str	r3, [r7, #12]
      break;
 8002a30:	e002      	b.n	8002a38 <RCC_PLL_GetFreqDomain_SYS+0x38>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8002a34:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a36:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8002a38:	f7ff fe00 	bl	800263c <LL_RCC_PLL_GetPrediv>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3301      	adds	r3, #1
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fbb2 f4f3 	udiv	r4, r2, r3
 8002a4a:	f7ff fde9 	bl	8002620 <LL_RCC_PLL_GetMultiplicator>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a54:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002a58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	603a      	str	r2, [r7, #0]
  return result;
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	40d3      	lsrs	r3, r2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	fb04 f303 	mul.w	r3, r4, r3
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	007a1200 	.word	0x007a1200

08002a80 <LL_USART_IsEnabled>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <LL_USART_IsEnabled+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_USART_IsEnabled+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_USART_SetStopBitsLength>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_USART_SetHWFlowCtrl>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_USART_SetBaudRate>:
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b06:	d11a      	bne.n	8002b3e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	005a      	lsls	r2, r3, #1
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	441a      	add	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	e00a      	b.n	8002b54 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	085a      	lsrs	r2, r3, #1
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	441a      	add	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	60da      	str	r2, [r3, #12]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff84 	bl	8002a80 <LL_USART_IsEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d15c      	bne.n	8002c38 <LL_USART_Init+0xd8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b30      	ldr	r3, [pc, #192]	@ (8002c44 <LL_USART_Init+0xe4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	6851      	ldr	r1, [r2, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6912      	ldr	r2, [r2, #16]
 8002b94:	4311      	orrs	r1, r2
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	6992      	ldr	r2, [r2, #24]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff7c 	bl	8002aa6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff89 	bl	8002acc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <LL_USART_Init+0xe8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d104      	bne.n	8002bcc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7ff fd6e 	bl	80026a4 <LL_RCC_GetUSARTClockFreq>
 8002bc8:	60b8      	str	r0, [r7, #8]
 8002bca:	e024      	b.n	8002c16 <LL_USART_Init+0xb6>
    }
    else if (USARTx == USART2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <LL_USART_Init+0xec>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d104      	bne.n	8002bde <LL_USART_Init+0x7e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002bd4:	2010      	movs	r0, #16
 8002bd6:	f7ff fd65 	bl	80026a4 <LL_RCC_GetUSARTClockFreq>
 8002bda:	60b8      	str	r0, [r7, #8]
 8002bdc:	e01b      	b.n	8002c16 <LL_USART_Init+0xb6>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <LL_USART_Init+0xf0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d104      	bne.n	8002bf0 <LL_USART_Init+0x90>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002be6:	2012      	movs	r0, #18
 8002be8:	f7ff fd5c 	bl	80026a4 <LL_RCC_GetUSARTClockFreq>
 8002bec:	60b8      	str	r0, [r7, #8]
 8002bee:	e012      	b.n	8002c16 <LL_USART_Init+0xb6>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <LL_USART_Init+0xf4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d105      	bne.n	8002c04 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002bf8:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8002bfc:	f7ff fe10 	bl	8002820 <LL_RCC_GetUARTClockFreq>
 8002c00:	60b8      	str	r0, [r7, #8]
 8002c02:	e008      	b.n	8002c16 <LL_USART_Init+0xb6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <LL_USART_Init+0xf8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d104      	bne.n	8002c16 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002c0c:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 8002c10:	f7ff fe06 	bl	8002820 <LL_RCC_GetUARTClockFreq>
 8002c14:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <LL_USART_Init+0xd8>
        && (USART_InitStruct->BaudRate != 0U))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <LL_USART_Init+0xd8>
    {
      status = SUCCESS;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff5d 	bl	8002af2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	efff69f3 	.word	0xefff69f3
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40004400 	.word	0x40004400
 8002c50:	40004800 	.word	0x40004800
 8002c54:	40004c00 	.word	0x40004c00
 8002c58:	40005000 	.word	0x40005000

08002c5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <LL_SetSystemCoreClock+0x1c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 8002c80:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8002c90:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <CanGetSpeedConfig>:
**            otherwise.
**
****************************************************************************************/
static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
                                  blt_int8u *tseg1, blt_int8u *tseg2)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	81fb      	strh	r3, [r7, #14]
  blt_int8u  cnt;
  blt_int32u canClockFreqkHz;
  LL_RCC_ClocksTypeDef rccClocks;

  /* read clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fcd1 	bl	8002658 <LL_RCC_GetSystemClocksFreq>
  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4a31      	ldr	r2, [pc, #196]	@ (8002d80 <CanGetSpeedConfig+0xe4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	623b      	str	r3, [r7, #32]

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002cc8:	e050      	b.n	8002d6c <CanGetSpeedConfig+0xd0>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 8002cca:	89fa      	ldrh	r2, [r7, #14]
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd0:	492c      	ldr	r1, [pc, #176]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002cd2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cdc:	4929      	ldr	r1, [pc, #164]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	4403      	add	r3, r0
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cf4:	fb01 f202 	mul.w	r2, r1, r2
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d131      	bne.n	8002d62 <CanGetSpeedConfig+0xc6>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 8002cfe:	89fa      	ldrh	r2, [r7, #14]
 8002d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d04:	491f      	ldr	r1, [pc, #124]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002d06:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d10:	491c      	ldr	r1, [pc, #112]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	4403      	add	r3, r0
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	801a      	strh	r2, [r3, #0]

      /* make sure the prescaler is valid */
      if ((*prescaler > 0) && (*prescaler <= 1024))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <CanGetSpeedConfig+0xc6>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d810      	bhi.n	8002d62 <CanGetSpeedConfig+0xc6>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 8002d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d44:	4a0f      	ldr	r2, [pc, #60]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002d46:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	701a      	strb	r2, [r3, #0]
        *tseg2 = canTiming[cnt].tseg2;
 8002d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d52:	4a0c      	ldr	r2, [pc, #48]	@ (8002d84 <CanGetSpeedConfig+0xe8>)
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	785a      	ldrb	r2, [r3, #1]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	701a      	strb	r2, [r3, #0]
        /* found a good bus timing configuration */
        return BLT_TRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e009      	b.n	8002d76 <CanGetSpeedConfig+0xda>
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d66:	3301      	adds	r3, #1
 8002d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d9aa      	bls.n	8002cca <CanGetSpeedConfig+0x2e>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return BLT_FALSE;
 8002d74:	2300      	movs	r3, #0
} /*** end of CanGetSpeedConfig ***/
 8002d76:	4618      	mov	r0, r3
 8002d78:	3728      	adds	r7, #40	@ 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	10624dd3 	.word	0x10624dd3
 8002d84:	08004740 	.word	0x08004740

08002d88 <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	@ 0x38
 8002d8c:	af00      	add	r7, sp, #0
  blt_int16u prescaler = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	857b      	strh	r3, [r7, #42]	@ 0x2a
  blt_int8u  tseg1 = 0, tseg2 = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  CAN_FilterTypeDef filterConfig;
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 8002d9e:	f240 6367 	movw	r3, #1639	@ 0x667
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* the current implementation supports CAN1. throw an assertion error in case a
   * different CAN channel is configured.
   */
  ASSERT_CT(BOOT_COM_CAN_CHANNEL_INDEX == 0);
  /* obtain bittiming configuration information. */
  if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 8002da4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002da8:	f107 0229 	add.w	r2, r7, #41	@ 0x29
 8002dac:	f107 012a 	add.w	r1, r7, #42	@ 0x2a
 8002db0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db4:	f7ff ff72 	bl	8002c9c <CanGetSpeedConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <CanInit+0x3e>
     * clock configuration. Verify the following settings in blt_conf.h:
     *   - BOOT_COM_CAN_BAUDRATE
     *   - BOOT_CPU_XTAL_SPEED_KHZ
     *   - BOOT_CPU_SYSTEM_SPEED_KHZ
     */
    ASSERT_RT(BLT_FALSE);
 8002dbe:	21af      	movs	r1, #175	@ 0xaf
 8002dc0:	4834      	ldr	r0, [pc, #208]	@ (8002e94 <CanInit+0x10c>)
 8002dc2:	f000 fd3c 	bl	800383e <AssertFailure>
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN_CHANNEL;
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <CanInit+0x110>)
 8002dc8:	4a34      	ldr	r2, [pc, #208]	@ (8002e9c <CanInit+0x114>)
 8002dca:	601a      	str	r2, [r3, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 8002dcc:	4b32      	ldr	r3, [pc, #200]	@ (8002e98 <CanInit+0x110>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	761a      	strb	r2, [r3, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <CanInit+0x110>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	765a      	strb	r2, [r3, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e98 <CanInit+0x110>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	769a      	strb	r2, [r3, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 8002dde:	4b2e      	ldr	r3, [pc, #184]	@ (8002e98 <CanInit+0x110>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	76da      	strb	r2, [r3, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <CanInit+0x110>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	771a      	strb	r2, [r3, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <CanInit+0x110>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	775a      	strb	r2, [r3, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 8002df0:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <CanInit+0x110>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002df6:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <CanInit+0x110>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8002dfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <CanInit+0x110>)
 8002e06:	6113      	str	r3, [r2, #16]
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 8002e08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	4a21      	ldr	r2, [pc, #132]	@ (8002e98 <CanInit+0x110>)
 8002e12:	6153      	str	r3, [r2, #20]
  canHandle.Init.Prescaler = prescaler;
 8002e14:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <CanInit+0x110>)
 8002e1a:	605a      	str	r2, [r3, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 8002e1c:	481e      	ldr	r0, [pc, #120]	@ (8002e98 <CanInit+0x110>)
 8002e1e:	f7fd ff6d 	bl	8000cfc <HAL_CAN_Init>
  /* determine the reception filter mask and id values such that it only leaves one
   * CAN identifier through (BOOT_COM_CAN_RX_MSG_ID).
   */
  if ((rxMsgId & 0x80000000) == 0)
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db05      	blt.n	8002e34 <CanInit+0xac>
  {
    rxFilterId = rxMsgId << CAN_RI0R_STID_Pos;
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	055b      	lsls	r3, r3, #21
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    rxFilterMask = (CAN_RI0R_STID_Msk) | CAN_RI0R_IDE;
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <CanInit+0x118>)
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e32:	e00a      	b.n	8002e4a <CanInit+0xc2>
  }
  else
  {
    /* negate the ID-type bit */
    rxMsgId &= ~0x80000000;
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    rxFilterId = (rxMsgId << CAN_RI0R_EXID_Pos) | CAN_RI0R_IDE;
 8002e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	637b      	str	r3, [r7, #52]	@ 0x34
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <CanInit+0x11c>)
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
  filterConfig.FilterBank = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	623b      	str	r3, [r7, #32]
  /* select the start slave bank number (for CAN1). this configuration assigns filter
   * banks 0..13 to CAN1 and 14..27 to CAN2.
   */
  filterConfig.SlaveStartFilterBank = 14;
 8002e76:	230e      	movs	r3, #14
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4806      	ldr	r0, [pc, #24]	@ (8002e98 <CanInit+0x110>)
 8002e80:	f7fe f837 	bl	8000ef2 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 8002e84:	4804      	ldr	r0, [pc, #16]	@ (8002e98 <CanInit+0x110>)
 8002e86:	f7fe f8fe 	bl	8001086 <HAL_CAN_Start>
} /*** end of CanInit ***/
 8002e8a:	bf00      	nop
 8002e8c:	3738      	adds	r7, #56	@ 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	08004698 	.word	0x08004698
 8002e98:	20000088 	.word	0x20000088
 8002e9c:	40006400 	.word	0x40006400
 8002ea0:	ffe00004 	.word	0xffe00004
 8002ea4:	001ffffc 	.word	0x001ffffc

08002ea8 <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	@ 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  blt_int32u txMsgId = BOOT_COM_CAN_TX_MSG_ID;
 8002eb4:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  blt_int32u txMsgMailbox;
  blt_int32u timeout;
  HAL_StatusTypeDef txStatus;

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
 8002eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db04      	blt.n	8002eca <CanTransmitPacket+0x22>
  {
    /* set the 11-bit CAN identifier. */
    txMsgHeader.StdId = txMsgId;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec2:	60fb      	str	r3, [r7, #12]
    txMsgHeader.IDE = CAN_ID_STD;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e007      	b.n	8002eda <CanTransmitPacket+0x32>
  }
  else
  {
    /* negate the ID-type bit */
    txMsgId &= ~0x80000000;
 8002eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ecc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* set the 29-bit CAN identifier. */
    txMsgHeader.ExtId = txMsgId;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed4:	613b      	str	r3, [r7, #16]
    txMsgHeader.IDE = CAN_ID_EXT;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]
  }
  txMsgHeader.RTR = CAN_RTR_DATA;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  txMsgHeader.DLC = len;
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	61fb      	str	r3, [r7, #28]

  /* submit the message for transmission. */
  txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	f107 010c 	add.w	r1, r7, #12
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4812      	ldr	r0, [pc, #72]	@ (8002f38 <CanTransmitPacket+0x90>)
 8002eee:	f7fe f90e 	bl	800110e <HAL_CAN_AddTxMessage>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                                  (uint32_t *)&txMsgMailbox);
  if (txStatus == HAL_OK)
 8002ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d117      	bne.n	8002f30 <CanTransmitPacket+0x88>
  {
    /* determine timeout time for the transmit completion. */
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 8002f00:	f000 fc8c 	bl	800381c <TimerGet>
 8002f04:	4603      	mov	r3, r0
 8002f06:	3332      	adds	r3, #50	@ 0x32
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
    /* poll for completion of the transmit operation. */
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 8002f0a:	e007      	b.n	8002f1c <CanTransmitPacket+0x74>
    {
      /* service the watchdog. */
      CopService();
 8002f0c:	f000 fdc5 	bl	8003a9a <CopService>
      /* break loop upon timeout. this would indicate a hardware failure or no other
       * nodes connected to the bus.
       */
      if (TimerGet() > timeout)
 8002f10:	f000 fc84 	bl	800381c <TimerGet>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d308      	bcc.n	8002f2e <CanTransmitPacket+0x86>
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	@ (8002f38 <CanTransmitPacket+0x90>)
 8002f22:	f7fe f9c4 	bl	80012ae <HAL_CAN_IsTxMessagePending>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <CanTransmitPacket+0x64>
      {
        break;
      }
    }
  }
} /*** end of CanTransmitPacket ***/
 8002f2c:	e000      	b.n	8002f30 <CanTransmitPacket+0x88>
        break;
 8002f2e:	bf00      	nop
} /*** end of CanTransmitPacket ***/
 8002f30:	bf00      	nop
 8002f32:	3730      	adds	r7, #48	@ 0x30
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000088 	.word	0x20000088

08002f3c <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	@ 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 8002f46:	f240 6367 	movw	r3, #1639	@ 0x667
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  blt_bool result = BLT_FALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  CAN_RxHeaderTypeDef rxMsgHeader;

  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 8002f52:	f107 020c 	add.w	r2, r7, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4818      	ldr	r0, [pc, #96]	@ (8002fbc <CanReceivePacket+0x80>)
 8002f5c:	f7fe f9cb 	bl	80012f6 <HAL_CAN_GetRxMessage>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11b      	bne.n	8002f9e <CanReceivePacket+0x62>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <CanReceivePacket+0x46>
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d114      	bne.n	8002f9e <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_STD) )
 8002f74:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d111      	bne.n	8002f9e <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002f80:	e00d      	b.n	8002f9e <CanReceivePacket+0x62>
      }
    }
    else
    {
      /* negate the ID-type bit. */
      rxMsgId &= ~0x80000000;
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* was an 29-bit CAN message received that matches? */
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d105      	bne.n	8002f9e <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_EXT) )
 8002f92:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d102      	bne.n	8002f9e <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }
  /* store the data length. */
  if (result == BLT_TRUE)
 8002f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d103      	bne.n	8002fae <CanReceivePacket+0x72>
  {
    *len = rxMsgHeader.DLC;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
  }
  /* Give the result back to the caller. */
  return result;
 8002fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
} /*** end of CanReceivePacket ***/
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3730      	adds	r7, #48	@ 0x30
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000088 	.word	0x20000088

08002fc0 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8002fc4:	f7ff fe5a 	bl	8002c7c <CpuIrqDisable>
} /*** end of CpuInit ***/
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8002fd2:	f000 fafc 	bl	80035ce <NvmVerifyChecksum>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01e      	beq.n	800301a <CpuStartUserProgram+0x4e>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8002fdc:	f7fd f91b 	bl	8000216 <CpuUserProgramStartHook>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01b      	beq.n	800301e <CpuStartUserProgram+0x52>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8002fe6:	f000 fcc1 	bl	800396c <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8002fea:	f7fd fe1d 	bl	8000c28 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8002fee:	f000 fbbd 	bl	800376c <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8002ff2:	f000 faf3 	bl	80035dc <NvmGetUserProgBaseAddress>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8003028 <CpuStartUserProgram+0x5c>)
 8002ffa:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002ffe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003002:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8003004:	f000 faea 	bl	80035dc <NvmGetUserProgBaseAddress>
 8003008:	4603      	mov	r3, r0
 800300a:	3304      	adds	r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8003010:	f7ff fe3c 	bl	8002c8c <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e002      	b.n	8003020 <CpuStartUserProgram+0x54>
    return;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <CpuStartUserProgram+0x54>
    return;
 800301e:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8003042:	e009      	b.n	8003058 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	1c53      	adds	r3, r2, #1
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	6139      	str	r1, [r7, #16]
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8003054:	f000 fd21 	bl	8003a9a <CopService>
  while (len-- > 0)
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	80fa      	strh	r2, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <FlashInit+0x20>)
 8003072:	f04f 32ff 	mov.w	r2, #4294967295
 8003076:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <FlashInit+0x24>)
 800307a:	f04f 32ff 	mov.w	r2, #4294967295
 800307e:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	200000b0 	.word	0x200000b0
 8003090:	200002b4 	.word	0x200002b4

08003094 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	491c      	ldr	r1, [pc, #112]	@ (8003118 <FlashWrite+0x84>)
 80030a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030aa:	4419      	add	r1, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1acb      	subs	r3, r1, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d901      	bls.n	80030ba <FlashWrite+0x26>
  {
    return BLT_FALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e029      	b.n	800310e <FlashWrite+0x7a>
  }

  /* make sure the addresses are within the flash device */
  if ((addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <FlashWrite+0x88>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d30a      	bcc.n	80030d8 <FlashWrite+0x44>
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4413      	add	r3, r2
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	4913      	ldr	r1, [pc, #76]	@ (8003118 <FlashWrite+0x84>)
 80030cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030d0:	440b      	add	r3, r1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d901      	bls.n	80030dc <FlashWrite+0x48>
  {
    return BLT_FALSE;
 80030d8:	2300      	movs	r3, #0
 80030da:	e018      	b.n	800310e <FlashWrite+0x7a>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 80030e8:	4a0c      	ldr	r2, [pc, #48]	@ (800311c <FlashWrite+0x88>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d107      	bne.n	8003100 <FlashWrite+0x6c>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68f9      	ldr	r1, [r7, #12]
 80030f6:	480a      	ldr	r0, [pc, #40]	@ (8003120 <FlashWrite+0x8c>)
 80030f8:	f000 f9a4 	bl	8003444 <FlashAddToBlock>
 80030fc:	4603      	mov	r3, r0
 80030fe:	e006      	b.n	800310e <FlashWrite+0x7a>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	4807      	ldr	r0, [pc, #28]	@ (8003124 <FlashWrite+0x90>)
 8003108:	f000 f99c 	bl	8003444 <FlashAddToBlock>
 800310c:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	08038000 	.word	0x08038000
 800311c:	0800a000 	.word	0x0800a000
 8003120:	200002b4 	.word	0x200002b4
 8003124:	200000b0 	.word	0x200000b0

08003128 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  blt_addr erase_base_addr;
  blt_int32u total_erase_len;
  blt_int16u nr_of_erase_sectors;
  blt_int32u pageError = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  blt_int16u sector_idx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_bool result = BLT_TRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	4930      	ldr	r1, [pc, #192]	@ (8003204 <FlashErase+0xdc>)
 8003142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003146:	4419      	add	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	1acb      	subs	r3, r1, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	429a      	cmp	r2, r3
 8003150:	d901      	bls.n	8003156 <FlashErase+0x2e>
  {
    return BLT_FALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	e052      	b.n	80031fc <FlashErase+0xd4>
  }

  /* determine the base address for the erase operation, by aligning to
   * FLASH_ERASE_SECTOR_SIZE.
   */
  erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800315c:	f023 0307 	bic.w	r3, r3, #7
 8003160:	61fb      	str	r3, [r7, #28]
  
  /* make sure the addresses are within the flash device */
  if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 8003162:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <FlashErase+0xe0>)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4293      	cmp	r3, r2
 8003168:	d30a      	bcc.n	8003180 <FlashErase+0x58>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4413      	add	r3, r2
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	4924      	ldr	r1, [pc, #144]	@ (8003204 <FlashErase+0xdc>)
 8003174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003178:	440b      	add	r3, r1
 800317a:	3b01      	subs	r3, #1
 800317c:	429a      	cmp	r2, r3
 800317e:	d901      	bls.n	8003184 <FlashErase+0x5c>
  {
    return BLT_FALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	e03b      	b.n	80031fc <FlashErase+0xd4>
  }

  /* determine number of bytes to erase from base address */
  total_erase_len = len + (addr - erase_base_addr);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4413      	add	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]

  /* determine the number of sectors to erase */
  nr_of_erase_sectors = (blt_int16u)(total_erase_len / FLASH_ERASE_SECTOR_SIZE);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	0adb      	lsrs	r3, r3, #11
 8003194:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <FlashErase+0x7e>
  {
    nr_of_erase_sectors++;
 80031a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80031a2:	3301      	adds	r3, #1
 80031a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  /* prepare the erase initialization structure. */
  eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  eraseInitStruct.PageAddress = erase_base_addr;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	60fb      	str	r3, [r7, #12]
  eraseInitStruct.NbPages     = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	613b      	str	r3, [r7, #16]

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 80031b2:	f7fe fb19 	bl	80017e8 <HAL_FLASH_Unlock>

  /* loop through all sectors to erase them one by one. the HAL supports erasing multiple
   * pages with one function call, but then the watchdog can't be updated in between.
   */
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80031ba:	e017      	b.n	80031ec <FlashErase+0xc4>
  {
    /* keep the watchdog happy */
    CopService();
 80031bc:	f000 fc6d 	bl	8003a9a <CopService>
    /* erase the sector. */
    if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&pageError) != HAL_OK)
 80031c0:	f107 0214 	add.w	r2, r7, #20
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fbd0 	bl	8001970 <HAL_FLASHEx_Erase>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <FlashErase+0xb6>
    {
      /* flag error and stop erase operation */
      result = BLT_FALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      break;
 80031dc:	e00a      	b.n	80031f4 <FlashErase+0xcc>
    }
    /* update the page base address for the next sector. */
    eraseInitStruct.PageAddress += FLASH_ERASE_SECTOR_SIZE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e4:	60fb      	str	r3, [r7, #12]
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 80031e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031e8:	3301      	adds	r3, #1
 80031ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80031ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3e3      	bcc.n	80031bc <FlashErase+0x94>
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 80031f4:	f7fe fb1e 	bl	8001834 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
} /*** end of FlashErase ***/
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	08038000 	.word	0x08038000
 8003208:	0800a000 	.word	0x0800a000

0800320c <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8003216:	4b1e      	ldr	r3, [pc, #120]	@ (8003290 <FlashWriteChecksum+0x84>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d101      	bne.n	8003224 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	e031      	b.n	8003288 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <FlashWriteChecksum+0x88>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <FlashWriteChecksum+0x8c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8003238:	4b18      	ldr	r3, [pc, #96]	@ (800329c <FlashWriteChecksum+0x90>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <FlashWriteChecksum+0x94>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 800324c:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <FlashWriteChecksum+0x98>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8003256:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <FlashWriteChecksum+0x9c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8003260:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <FlashWriteChecksum+0xa0>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	43db      	mvns	r3, r3
 800326e:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <FlashWriteChecksum+0xa4>)
 8003278:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800327c:	1d3a      	adds	r2, r7, #4
 800327e:	2104      	movs	r1, #4
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff07 	bl	8003094 <FlashWrite>
 8003286:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	200002b4 	.word	0x200002b4
 8003294:	200002b8 	.word	0x200002b8
 8003298:	200002bc 	.word	0x200002bc
 800329c:	200002c0 	.word	0x200002c0
 80032a0:	200002c4 	.word	0x200002c4
 80032a4:	200002c8 	.word	0x200002c8
 80032a8:	200002cc 	.word	0x200002cc
 80032ac:	200002d0 	.word	0x200002d0
 80032b0:	0800a000 	.word	0x0800a000

080032b4 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032ca:	3304      	adds	r3, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032d6:	3308      	adds	r3, #8
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032e2:	330c      	adds	r3, #12
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032ee:	3310      	adds	r3, #16
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <FlashVerifyChecksum+0x84>)
 80032fa:	3314      	adds	r3, #20
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <FlashVerifyChecksum+0x84>)
 8003306:	3318      	adds	r3, #24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <FlashVerifyChecksum+0x84>)
 8003312:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8003328:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	0800a000 	.word	0x0800a000

0800333c <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <FlashDone+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d007      	beq.n	800335a <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800334a:	480c      	ldr	r0, [pc, #48]	@ (800337c <FlashDone+0x40>)
 800334c:	f000 f8dc 	bl	8003508 <FlashWriteBlock>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	e00d      	b.n	8003376 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800335a:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <FlashDone+0x44>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d007      	beq.n	8003374 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8003364:	4806      	ldr	r0, [pc, #24]	@ (8003380 <FlashDone+0x44>)
 8003366:	f000 f8cf 	bl	8003508 <FlashWriteBlock>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8003374:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200002b4 	.word	0x200002b4
 8003380:	200000b0 	.word	0x200000b0

08003384 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8003388:	4b02      	ldr	r3, [pc, #8]	@ (8003394 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	0800a000 	.word	0x0800a000

08003398 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e012      	b.n	80033d6 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d101      	bne.n	80033be <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00b      	b.n	80033d6 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033cc:	6839      	ldr	r1, [r7, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fe2c 	bl	800302c <CpuMemCopy>
  return BLT_TRUE;
 80033d4:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <FlashSwitchBlock+0x58>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <FlashSwitchBlock+0x5c>)
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	e010      	b.n	800341a <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 80033f8:	4a11      	ldr	r2, [pc, #68]	@ (8003440 <FlashSwitchBlock+0x60>)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d104      	bne.n	800340a <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8003400:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <FlashSwitchBlock+0x58>)
 8003402:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <FlashSwitchBlock+0x60>)
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	e007      	b.n	800341a <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f87c 	bl	8003508 <FlashWriteBlock>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	e009      	b.n	800342e <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ffbb 	bl	8003398 <FlashInitBlock>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 800342c:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200002b4 	.word	0x200002b4
 800343c:	200000b0 	.word	0x200000b0
 8003440:	0800a000 	.word	0x0800a000

08003444 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d108      	bne.n	800347a <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8003468:	6979      	ldr	r1, [r7, #20]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff94 	bl	8003398 <FlashInitBlock>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	e042      	b.n	8003500 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	429a      	cmp	r2, r3
 8003482:	d009      	beq.n	8003498 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8003484:	6979      	ldr	r1, [r7, #20]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff ffaa 	bl	80033e0 <FlashSwitchBlock>
 800348c:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	e033      	b.n	8003500 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	61fb      	str	r3, [r7, #28]
  src = data;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 80034ac:	f000 faf5 	bl	8003a9a <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3304      	adds	r3, #4
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034bc:	d30f      	bcc.n	80034de <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034c4:	4619      	mov	r1, r3
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff8a 	bl	80033e0 <FlashSwitchBlock>
 80034cc:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e013      	b.n	8003500 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3304      	adds	r3, #4
 80034dc:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
    src++;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1d6      	bne.n	80034ac <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 80034fe:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8003514:	f7fe f968 	bl	80017e8 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e029      	b.n	8003572 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8003538:	f000 faaf 	bl	8003a9a <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	461c      	mov	r4, r3
 8003542:	4615      	mov	r5, r2
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	2002      	movs	r0, #2
 800354c:	f7fe f8dc 	bl	8001708 <HAL_FLASH_Program>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	74fb      	strb	r3, [r7, #19]
      break;
 800355a:	e00d      	b.n	8003578 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d002      	beq.n	800356c <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	74fb      	strb	r3, [r7, #19]
      break;
 800356a:	e005      	b.n	8003578 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b7f      	cmp	r3, #127	@ 0x7f
 8003576:	d9d2      	bls.n	800351e <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8003578:	f7fe f95c 	bl	8001834 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bdb0      	pop	{r4, r5, r7, pc}

08003586 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 800358a:	f7ff fd6f 	bl	800306c <FlashInit>
} /*** end of NvmInit ***/
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}

08003592 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff fd76 	bl	8003094 <FlashWrite>
 80035a8:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fdb2 	bl	8003128 <FlashErase>
 80035c4:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 80035d2:	f7ff fe6f 	bl	80032b4 <FlashVerifyChecksum>
 80035d6:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}

080035dc <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 80035e0:	f7ff fed0 	bl	8003384 <FlashGetUserProgBaseAddress>
 80035e4:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}

080035ea <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 80035ee:	f7ff fe0d 	bl	800320c <FlashWriteChecksum>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <NvmDone+0x12>
  {
    return BLT_FALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e002      	b.n	8003602 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 80035fc:	f7ff fe9e 	bl	800333c <FlashDone>
 8003600:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <LL_APB1_GRP1_EnableClock>:
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	4907      	ldr	r1, [pc, #28]	@ (8003634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <LL_APB1_GRP1_EnableClock+0x2c>)
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4013      	ands	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40021000 	.word	0x40021000

08003638 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <LL_APB1_GRP1_DisableClock+0x24>)
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	43db      	mvns	r3, r3
 8003648:	4904      	ldr	r1, [pc, #16]	@ (800365c <LL_APB1_GRP1_DisableClock+0x24>)
 800364a:	4013      	ands	r3, r2
 800364c:	61cb      	str	r3, [r1, #28]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000

08003660 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <LL_APB1_GRP1_ForceReset+0x20>)
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	4904      	ldr	r1, [pc, #16]	@ (8003680 <LL_APB1_GRP1_ForceReset+0x20>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000

08003684 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <LL_APB1_GRP1_ReleaseReset+0x24>)
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	43db      	mvns	r3, r3
 8003694:	4904      	ldr	r1, [pc, #16]	@ (80036a8 <LL_APB1_GRP1_ReleaseReset+0x24>)
 8003696:	4013      	ands	r3, r2
 8003698:	610b      	str	r3, [r1, #16]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000

080036ac <LL_RCC_GetAPB1Prescaler>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <TimerInit>:
**            inline functions.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0

  /* All STM32F3 derivatives support a TIM2 peripheral. Its free running counter will be
   * used to realize the polling based millisecond time reference in this module.
   * Start by enabling the periperhal.
   */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7ff ff9a 	bl	8003608 <LL_APB1_GRP1_EnableClock>
  /* The TIM2 peripheral clock is derived from PCLK1. Obtain the PCLK1 frequency. */
  pclk1_frequency = __LL_RCC_CALC_PCLK1_FREQ(SystemCoreClock, LL_RCC_GetAPB1Prescaler());
 80036d4:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <TimerInit+0x90>)
 80036d6:	681c      	ldr	r4, [r3, #0]
 80036d8:	f7ff ffe8 	bl	80036ac <LL_RCC_GetAPB1Prescaler>
 80036dc:	4603      	mov	r3, r0
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <TimerInit+0x94>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	fa24 f303 	lsr.w	r3, r4, r3
 80036e8:	60fb      	str	r3, [r7, #12]
  /* According to the clock tree diagram in the RCC chapter of the reference manual,
   * the PCLK1-TIM frequency = PLCK1 * 1, when the APB1 prescaler is 1, otherwise it is
   * PCLK1 * 2.
   */
  tim_multiplier = (LL_RCC_GetAPB1Prescaler() == LL_RCC_APB1_DIV_1) ? 1U : 2U;
 80036ea:	f7ff ffdf 	bl	80036ac <LL_RCC_GetAPB1Prescaler>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <TimerInit+0x30>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <TimerInit+0x32>
 80036f8:	2302      	movs	r3, #2
 80036fa:	72fb      	strb	r3, [r7, #11]
  /* Obtain the PCLK1-TIM frequency. */
  pclk1_tim_frequency = pclk1_frequency * tim_multiplier;
 80036fc:	7afa      	ldrb	r2, [r7, #11]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	607b      	str	r3, [r7, #4]
  /* Configure the free running counter as a 16-bit upwards counter that runs at the
   * desired frequency and enable it.
   */
  TIM2->CR1 = TIM_CR1_CEN;
 8003706:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
  TIM2->ARR = 65535U;
 800370e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->PSC = (pclk1_tim_frequency / TIMER_COUNTER_FREQ_HZ) - 1U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	4a10      	ldr	r2, [pc, #64]	@ (8003760 <TimerInit+0x98>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	09db      	lsrs	r3, r3, #7
 8003724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003728:	3b01      	subs	r3, #1
 800372a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* Generate an update event to reload the prescaler immediately. */
  TIM2->EGR |= TIM_EGR_UG;
 800372c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6153      	str	r3, [r2, #20]
  /* Initialize locals. */
  millisecond_counter = 0;
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <TimerInit+0x9c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
  free_running_counter_last = (blt_int16u)TIM2->CNT;
 8003742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <TimerInit+0xa0>)
 800374c:	801a      	strh	r2, [r3, #0]
} /*** end of TimerInit ***/
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000
 800375c:	08004738 	.word	0x08004738
 8003760:	0a7c5ac5 	.word	0x0a7c5ac5
 8003764:	200004b8 	.word	0x200004b8
 8003768:	200004bc 	.word	0x200004bc

0800376c <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Bring the TIM2 peripheral back into its reset state and disable its clock. */
  LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
 8003770:	2001      	movs	r0, #1
 8003772:	f7ff ff75 	bl	8003660 <LL_APB1_GRP1_ForceReset>
  LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
 8003776:	2001      	movs	r0, #1
 8003778:	f7ff ff84 	bl	8003684 <LL_APB1_GRP1_ReleaseReset>
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800377c:	2001      	movs	r0, #1
 800377e:	f7ff ff5b 	bl	8003638 <LL_APB1_GRP1_DisableClock>
  /* Set the SysTick's registers back into the default reset value. Note that this module
   * does not use the SysTick, but HAL_Init() did initialize it.
   */
  SysTick->CTRL = 0;
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <TimerReset+0x38>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <TimerReset+0x38>)
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <TimerReset+0x38>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <TimerReset+0x3c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a03      	ldr	r2, [pc, #12]	@ (80037a8 <TimerReset+0x3c>)
 800379a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800379e:	6053      	str	r3, [r2, #4]
} /*** end of TimerReset */
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000e010 	.word	0xe000e010
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
  blt_int16u free_running_counter_now;
  blt_int16u delta_counts;
  blt_int16u ms_counts;

  /* Get the current value of the free running counter. */
  free_running_counter_now = (blt_int16u)TIM2->CNT;
 80037b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Calculate the number of counts that passed since the detection of the last
   * millisecond event. Note that this calculation also works, in case the free running
   * counter overflowed, thanks to integer math.
   */
  delta_counts = free_running_counter_now - free_running_counter_last;
 80037ba:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <TimerUpdate+0x64>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	80bb      	strh	r3, [r7, #4]

  /* Did one or more milliseconds pass since the last event? */
  if (delta_counts >= TIMER_COUNTS_PER_MS)
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	2b63      	cmp	r3, #99	@ 0x63
 80037c8:	d91c      	bls.n	8003804 <TimerUpdate+0x58>
  {
    /* Calculate how many milliseconds passed. */
    ms_counts = delta_counts / TIMER_COUNTS_PER_MS;
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	4a11      	ldr	r2, [pc, #68]	@ (8003814 <TimerUpdate+0x68>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	807b      	strh	r3, [r7, #2]
    /* Update the millisecond counter. */
    millisecond_counter += ms_counts;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <TimerUpdate+0x6c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4413      	add	r3, r2
 80037de:	4a0e      	ldr	r2, [pc, #56]	@ (8003818 <TimerUpdate+0x6c>)
 80037e0:	6013      	str	r3, [r2, #0]
    /* Store the counter value of the last millisecond event, to detect the next one. */
    free_running_counter_last += (ms_counts * TIMER_COUNTS_PER_MS);
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	461a      	mov	r2, r3
 80037e6:	0092      	lsls	r2, r2, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	0091      	lsls	r1, r2, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	460b      	mov	r3, r1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <TimerUpdate+0x64>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <TimerUpdate+0x64>)
 8003802:	801a      	strh	r2, [r3, #0]
  }
} /*** end of TimerUpdate ***/
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	200004bc 	.word	0x200004bc
 8003814:	51eb851f 	.word	0x51eb851f
 8003818:	200004b8 	.word	0x200004b8

0800381c <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8003820:	f7ff ffc4 	bl	80037ac <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8003824:	4b01      	ldr	r3, [pc, #4]	@ (800382c <TimerGet+0x10>)
 8003826:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200004b8 	.word	0x200004b8

08003830 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8003834:	f7ff fff2 	bl	800381c <TimerGet>
 8003838:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}

0800383e <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8003848:	f000 f927 	bl	8003a9a <CopService>
 800384c:	e7fc      	b.n	8003848 <AssertFailure+0xa>
	...

08003850 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 8003854:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <BackDoorInit+0x18>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 800385a:	f000 f82d 	bl	80038b8 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 800385e:	f000 f805 	bl	800386c <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200004be 	.word	0x200004be

0800386c <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8003870:	f000 f8fc 	bl	8003a6c <ComIsConnected>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d015      	beq.n	80038a6 <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 800387a:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <BackDoorCheck+0x40>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d112      	bne.n	80038a8 <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8003882:	f7ff ffcb 	bl	800381c <TimerGet>
 8003886:	4601      	mov	r1, r0
 8003888:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <BackDoorCheck+0x44>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <BackDoorCheck+0x48>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4413      	add	r3, r2
 8003892:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003896:	4299      	cmp	r1, r3
 8003898:	d306      	bcc.n	80038a8 <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 800389a:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <BackDoorCheck+0x40>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 80038a0:	f7ff fb94 	bl	8002fcc <CpuStartUserProgram>
 80038a4:	e000      	b.n	80038a8 <BackDoorCheck+0x3c>
    return;
 80038a6:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200004be 	.word	0x200004be
 80038b0:	200004c4 	.word	0x200004c4
 80038b4:	200004c0 	.word	0x200004c0

080038b8 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <BackDoorRestartTimer+0x1c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d104      	bne.n	80038ce <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 80038c4:	f7ff ffaa 	bl	800381c <TimerGet>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a03      	ldr	r2, [pc, #12]	@ (80038d8 <BackDoorRestartTimer+0x20>)
 80038cc:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200004be 	.word	0x200004be
 80038d8:	200004c0 	.word	0x200004c0

080038dc <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 80038e0:	f7ff fb6e 	bl	8002fc0 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 80038e4:	f000 f8d3 	bl	8003a8e <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 80038e8:	f7ff feee 	bl	80036c8 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 80038ec:	f7ff fe4b 	bl	8003586 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 80038f0:	f000 f812 	bl	8003918 <ComInit>
#endif
#if (BOOT_INFO_TABLE_ENABLE > 0)
  /* initialize the info table check module */
  InfoTableInit();
 80038f4:	f000 f8d8 	bl	8003aa8 <InfoTableInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 80038f8:	f7ff ffaa 	bl	8003850 <BackDoorInit>
} /*** end of BootInit ***/
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8003904:	f000 f8c9 	bl	8003a9a <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8003908:	f7ff ff50 	bl	80037ac <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800390c:	f000 f812 	bl	8003934 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8003910:	f7ff ffac 	bl	800386c <BackDoorCheck>
} /*** end of BootTask ***/
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}

08003918 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 800391c:	f000 f98a 	bl	8003c34 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 8003920:	f7ff fa32 	bl	8002d88 <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 8003924:	4b02      	ldr	r3, [pc, #8]	@ (8003930 <ComInit+0x18>)
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000009 	.word	0x20000009

08003934 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	4619      	mov	r1, r3
 800393e:	4809      	ldr	r0, [pc, #36]	@ (8003964 <ComTask+0x30>)
 8003940:	f7ff fafc 	bl	8002f3c <CanReceivePacket>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_CAN;
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <ComTask+0x34>)
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4619      	mov	r1, r3
 8003954:	4803      	ldr	r0, [pc, #12]	@ (8003964 <ComTask+0x30>)
 8003956:	f000 f9af 	bl	8003cb8 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200004c8 	.word	0x200004c8
 8003968:	20000009 	.word	0x20000009

0800396c <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	807b      	strh	r3, [r7, #2]
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 8003988:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <ComTransmitPacket+0x2c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d105      	bne.n	800399c <ComTransmitPacket+0x20>
  {
    CanTransmitPacket(data, (blt_int8u)len);
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fa86 	bl	8002ea8 <CanTransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 800399c:	f000 f97e 	bl	8003c9c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000009 	.word	0x20000009

080039ac <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80039b2:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <ComGetActiveInterfaceMaxRxLen+0x5c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d81b      	bhi.n	80039f2 <ComGetActiveInterfaceMaxRxLen+0x46>
 80039ba:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <ComGetActiveInterfaceMaxRxLen+0x14>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039d5 	.word	0x080039d5
 80039c4:	080039db 	.word	0x080039db
 80039c8:	080039e1 	.word	0x080039e1
 80039cc:	080039e7 	.word	0x080039e7
 80039d0:	080039ed 	.word	0x080039ed
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 80039d4:	2381      	movs	r3, #129	@ 0x81
 80039d6:	80fb      	strh	r3, [r7, #6]
      break;
 80039d8:	e00e      	b.n	80039f8 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_RX_MAX_DATA;
 80039da:	2300      	movs	r3, #0
 80039dc:	80fb      	strh	r3, [r7, #6]
      break;
 80039de:	e00b      	b.n	80039f8 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 80039e0:	2308      	movs	r3, #8
 80039e2:	80fb      	strh	r3, [r7, #6]
      break;
 80039e4:	e008      	b.n	80039f8 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 80039e6:	233f      	movs	r3, #63	@ 0x3f
 80039e8:	80fb      	strh	r3, [r7, #6]
      break;
 80039ea:	e005      	b.n	80039f8 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 80039ec:	2300      	movs	r3, #0
 80039ee:	80fb      	strh	r3, [r7, #6]
      break;
 80039f0:	e002      	b.n	80039f8 <ComGetActiveInterfaceMaxRxLen+0x4c>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 80039f2:	2381      	movs	r3, #129	@ 0x81
 80039f4:	80fb      	strh	r3, [r7, #6]
      break;
 80039f6:	bf00      	nop
  }

  return result;
 80039f8:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000009 	.word	0x20000009

08003a0c <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <ComGetActiveInterfaceMaxTxLen+0x5c>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d81b      	bhi.n	8003a52 <ComGetActiveInterfaceMaxTxLen+0x46>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a3b 	.word	0x08003a3b
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a47 	.word	0x08003a47
 8003a30:	08003a4d 	.word	0x08003a4d
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8003a34:	2381      	movs	r3, #129	@ 0x81
 8003a36:	80fb      	strh	r3, [r7, #6]
      break;
 8003a38:	e00e      	b.n	8003a58 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_TX_MAX_DATA;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	80fb      	strh	r3, [r7, #6]
      break;
 8003a3e:	e00b      	b.n	8003a58 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8003a40:	2308      	movs	r3, #8
 8003a42:	80fb      	strh	r3, [r7, #6]
      break;
 8003a44:	e008      	b.n	8003a58 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8003a46:	233f      	movs	r3, #63	@ 0x3f
 8003a48:	80fb      	strh	r3, [r7, #6]
      break;
 8003a4a:	e005      	b.n	8003a58 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	80fb      	strh	r3, [r7, #6]
      break;
 8003a50:	e002      	b.n	8003a58 <ComGetActiveInterfaceMaxTxLen+0x4c>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8003a52:	2381      	movs	r3, #129	@ 0x81
 8003a54:	80fb      	strh	r3, [r7, #6]
      break;
 8003a56:	bf00      	nop
  }

  return result;
 8003a58:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000009 	.word	0x20000009

08003a6c <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8003a76:	f000 f8ff 	bl	8003c78 <XcpIsConnected>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8003a84:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8003a92:	f7fc fbd1 	bl	8000238 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8003a9e:	f7fc fbd2 	bl	8000246 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <InfoTableInit>:
** \brief     Initializes the info table module.
** \return    none
**
****************************************************************************************/
void InfoTableInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Initialize module locals. */
  infoTableWritePtr = &infoTableBuffer[0];
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <InfoTableInit+0x14>)
 8003aae:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <InfoTableInit+0x18>)
 8003ab0:	601a      	str	r2, [r3, #0]
  /* Clear the info table in the internal RAM buffer. */
  InfoTableClear(INFO_TABLE_ID_INTERNAL_RAM);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f000 f83c 	bl	8003b30 <InfoTableClear>
} /*** end of InfoTableInit ***/
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000558 	.word	0x20000558
 8003ac0:	2000054c 	.word	0x2000054c

08003ac4 <InfoTableCheck>:
** \return    BLT_TRUE if the info table check passed and the firmware update is allowed
**            to proceed. BLT_FALSE if the firmware update is not allowed to proceed.
**
****************************************************************************************/
blt_bool InfoTableCheck(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
  blt_bool result;
  blt_addr infoTableNewAddr;
  blt_addr infoTableCurrentAddr;

  /* Collect info table pointers. */
  infoTableNewAddr     = InfoTableGetPtr(INFO_TABLE_ID_INTERNAL_RAM);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f000 f818 	bl	8003b00 <InfoTableGetPtr>
 8003ad0:	60b8      	str	r0, [r7, #8]
  infoTableCurrentAddr = InfoTableGetPtr(INFO_TABLE_ID_FIRMWARE_NVM);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 f814 	bl	8003b00 <InfoTableGetPtr>
 8003ad8:	6078      	str	r0, [r7, #4]

  /* An info table check can only be performed if a valid one is present. Check the
   * currently programmed firmware's checksum for this reason.
   */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8003ada:	f7ff fd78 	bl	80035ce <NvmVerifyChecksum>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <InfoTableCheck+0x26>
    /* No valid firmware present. This usually means that no firmware is yet programmed
     * or the previous firmware update did not run all the way to completion. In either
     * case, the current firmware update is allowed to proceed, without further info
     * table checking.
     */
    result = BLT_TRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e005      	b.n	8003af6 <InfoTableCheck+0x32>
   * should be present.
   */
  else
  {
    /* Request bootloader application to perform the info table check. */
    result = InfoTableCheckHook(infoTableNewAddr, infoTableCurrentAddr);
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68b8      	ldr	r0, [r7, #8]
 8003aee:	f7fc fbb0 	bl	8000252 <InfoTableCheckHook>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
  }

  /* Give the result back to the caller. */
  return result;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of InfoTableCheck ***/
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <InfoTableGetPtr>:
** \param     infoTableId Specifies the info table to get the pointer to.
** \return    Address of the selected info table.
**
****************************************************************************************/
blt_addr InfoTableGetPtr(tInfoTableId infoTableId)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  blt_addr result;

  /* Info table of this module's RAM buffer? This is where the info table of the to-be-
   * programmed firmware will be written to.
   */
  if (infoTableId == INFO_TABLE_ID_INTERNAL_RAM)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <InfoTableGetPtr+0x16>
  {
    result = (blt_addr)(&infoTableBuffer[0]);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <InfoTableGetPtr+0x28>)
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e001      	b.n	8003b1a <InfoTableGetPtr+0x1a>
  /* Info table of the currently programmed firmware. Note that it is possible that
   * no firmware is programmed at all.
   */
  else
  {
    result = (blt_addr)BOOT_INFO_TABLE_ADDR;
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <InfoTableGetPtr+0x2c>)
 8003b18:	60fb      	str	r3, [r7, #12]
  }
  /* Give the result back to the caller. */
  return result;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
} /*** end of InfoTableGetPtr ***/
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	2000054c 	.word	0x2000054c
 8003b2c:	0800a200 	.word	0x0800a200

08003b30 <InfoTableClear>:
**            be changed.
** \return    none.
**
****************************************************************************************/
void InfoTableClear(tInfoTableId infoTableId)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  blt_int16u idx;

  /* Verify parameter. */
  ASSERT_RT(infoTableId == INFO_TABLE_ID_INTERNAL_RAM);
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <InfoTableClear+0x18>
 8003b40:	21a2      	movs	r1, #162	@ 0xa2
 8003b42:	480d      	ldr	r0, [pc, #52]	@ (8003b78 <InfoTableClear+0x48>)
 8003b44:	f7ff fe7b 	bl	800383e <AssertFailure>

  /* Only continue with a valid parameter. */
  if (infoTableId == INFO_TABLE_ID_INTERNAL_RAM)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <InfoTableClear+0x3e>
  {
    /* Clear the contents of the info table RAM buffer. */
    for (idx = 0U; idx < BOOT_INFO_TABLE_LEN; idx++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	81fb      	strh	r3, [r7, #14]
 8003b52:	e006      	b.n	8003b62 <InfoTableClear+0x32>
    {
      infoTableBuffer[idx] = 0U;
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <InfoTableClear+0x4c>)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	54d1      	strb	r1, [r2, r3]
    for (idx = 0U; idx < BOOT_INFO_TABLE_LEN; idx++)
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	81fb      	strh	r3, [r7, #14]
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	2b0b      	cmp	r3, #11
 8003b66:	d9f5      	bls.n	8003b54 <InfoTableClear+0x24>
    }
    /* Reset the write pointer. */
    infoTableWritePtr = &infoTableBuffer[0];
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <InfoTableClear+0x50>)
 8003b6a:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <InfoTableClear+0x4c>)
 8003b6c:	601a      	str	r2, [r3, #0]
  }
} /*** end of InfoTableClear ***/
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	080046e4 	.word	0x080046e4
 8003b7c:	2000054c 	.word	0x2000054c
 8003b80:	20000558 	.word	0x20000558

08003b84 <InfoTableCurrentSize>:
**            be changed.
** \return    The number of bytes currently present in the info table.
**
****************************************************************************************/
blt_int16u InfoTableCurrentSize(tInfoTableId infoTableId)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  blt_int16u result = BOOT_INFO_TABLE_LEN + 1; /* Invalid length (too full). */
 8003b8e:	230d      	movs	r3, #13
 8003b90:	81fb      	strh	r3, [r7, #14]

  if (infoTableId == INFO_TABLE_ID_INTERNAL_RAM)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <InfoTableCurrentSize+0x2c>
  {
    /* Calculate stored number of bytes by making use of the write pointer. First do a
     * sanity check.
     */
    if (infoTableWritePtr >= &infoTableBuffer[0])
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <InfoTableCurrentSize+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <InfoTableCurrentSize+0x44>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d308      	bcc.n	8003bb4 <InfoTableCurrentSize+0x30>
    {
      result = (blt_int16u)((blt_addr)infoTableWritePtr-(blt_addr)(&infoTableBuffer[0]));
 8003ba2:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <InfoTableCurrentSize+0x40>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <InfoTableCurrentSize+0x44>)
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	81fb      	strh	r3, [r7, #14]
 8003bae:	e001      	b.n	8003bb4 <InfoTableCurrentSize+0x30>
    }
  }
  else
  {
    /* Info table in NVM has fixed size as it cannot be changed. */
    result = BOOT_INFO_TABLE_LEN;
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	81fb      	strh	r3, [r7, #14]
  }

  /* Give the result back to the caller. */
  return result;
 8003bb4:	89fb      	ldrh	r3, [r7, #14]
} /*** end of InfoTableCurrentSize ***/
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000558 	.word	0x20000558
 8003bc8:	2000054c 	.word	0x2000054c

08003bcc <InfoTableAddData>:
** \return    BLT_TRUE if the data could be added to the info table, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool InfoTableAddData(tInfoTableId infoTableId, blt_int8u const * data, 
                          blt_int16u len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	80bb      	strh	r3, [r7, #4]
  blt_bool result = BLT_FALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]

  /* Can only add data to the internal RAM info table and with a valid data pointer. */
  if ( (infoTableId == INFO_TABLE_ID_INTERNAL_RAM) && (data != BLT_NULL) && (len > 0) )
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11e      	bne.n	8003c24 <InfoTableAddData+0x58>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <InfoTableAddData+0x58>
 8003bec:	88bb      	ldrh	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d018      	beq.n	8003c24 <InfoTableAddData+0x58>
  {
    /* Only continue if this data still fits in the info table. */
    if ((InfoTableCurrentSize(INFO_TABLE_ID_INTERNAL_RAM) + len) <= BOOT_INFO_TABLE_LEN)
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7ff ffc6 	bl	8003b84 <InfoTableCurrentSize>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	88bb      	ldrh	r3, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	dc0f      	bgt.n	8003c24 <InfoTableAddData+0x58>
    {
      /* Store the data in the internal RAM info table. */
      CpuMemCopy((blt_addr)infoTableWritePtr, (blt_addr)((blt_int32u)&data[0]), len);
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <InfoTableAddData+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	88ba      	ldrh	r2, [r7, #4]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7ff fa0c 	bl	800302c <CpuMemCopy>
      /* Update the write pointer accordingly. */
      infoTableWritePtr += len;
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <InfoTableAddData+0x64>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	88bb      	ldrh	r3, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <InfoTableAddData+0x64>)
 8003c1e:	6013      	str	r3, [r2, #0]
      /* Update the result. */
      result = BLT_TRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of InfoTableAddData ***/
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000558 	.word	0x20000558

08003c34 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <XcpInit+0x40>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  xcpInfo.mta = 0;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <XcpInit+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  xcpInfo.ctoPending = 0;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <XcpInit+0x40>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  xcpInfo.ctoLen = 0;
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <XcpInit+0x40>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  xcpInfo.s_n_k_resource = 0;
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <XcpInit+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  xcpInfo.protection = 0;
 8003c60:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <XcpInit+0x40>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
} /*** end of XcpInit ***/
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000055c 	.word	0x2000055c

08003c78 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8003c7c:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <XcpIsConnected+0x20>)
 8003c7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 8003c8a:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	2000055c 	.word	0x2000055c

08003c9c <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8003ca0:	4b04      	ldr	r3, [pc, #16]	@ (8003cb4 <XcpPacketTransmitted+0x18>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
} /*** end of XcpPacketTransmitted ***/
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000055c 	.word	0x2000055c

08003cb8 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2bff      	cmp	r3, #255	@ 0xff
 8003cca:	d103      	bne.n	8003cd4 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f97d 	bl	8003fcc <XcpCmdConnect>
 8003cd2:	e0bb      	b.n	8003e4c <XcpPacketReceived+0x194>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003cd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 80cf 	bne.w	8003e7e <XcpPacketReceived+0x1c6>
  {
    switch (data[0])
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	3bc9      	subs	r3, #201	@ 0xc9
 8003ce6:	2b35      	cmp	r3, #53	@ 0x35
 8003ce8:	f200 80ac 	bhi.w	8003e44 <XcpPacketReceived+0x18c>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <XcpPacketReceived+0x3c>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003e0d 	.word	0x08003e0d
 8003cf8:	08003e45 	.word	0x08003e45
 8003cfc:	08003e45 	.word	0x08003e45
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e45 	.word	0x08003e45
 8003d08:	08003e45 	.word	0x08003e45
 8003d0c:	08003e2d 	.word	0x08003e2d
 8003d10:	08003e15 	.word	0x08003e15
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	08003e1d 	.word	0x08003e1d
 8003d1c:	08003e45 	.word	0x08003e45
 8003d20:	08003e45 	.word	0x08003e45
 8003d24:	08003e45 	.word	0x08003e45
 8003d28:	08003e45 	.word	0x08003e45
 8003d2c:	08003e45 	.word	0x08003e45
 8003d30:	08003e45 	.word	0x08003e45
 8003d34:	08003e45 	.word	0x08003e45
 8003d38:	08003e45 	.word	0x08003e45
 8003d3c:	08003e45 	.word	0x08003e45
 8003d40:	08003e45 	.word	0x08003e45
 8003d44:	08003e45 	.word	0x08003e45
 8003d48:	08003e45 	.word	0x08003e45
 8003d4c:	08003e45 	.word	0x08003e45
 8003d50:	08003e45 	.word	0x08003e45
 8003d54:	08003e45 	.word	0x08003e45
 8003d58:	08003e45 	.word	0x08003e45
 8003d5c:	08003e45 	.word	0x08003e45
 8003d60:	08003e45 	.word	0x08003e45
 8003d64:	08003e45 	.word	0x08003e45
 8003d68:	08003e45 	.word	0x08003e45
 8003d6c:	08003e45 	.word	0x08003e45
 8003d70:	08003e45 	.word	0x08003e45
 8003d74:	08003e45 	.word	0x08003e45
 8003d78:	08003e45 	.word	0x08003e45
 8003d7c:	08003e45 	.word	0x08003e45
 8003d80:	08003e45 	.word	0x08003e45
 8003d84:	08003e45 	.word	0x08003e45
 8003d88:	08003e45 	.word	0x08003e45
 8003d8c:	08003e45 	.word	0x08003e45
 8003d90:	08003e45 	.word	0x08003e45
 8003d94:	08003e3d 	.word	0x08003e3d
 8003d98:	08003e45 	.word	0x08003e45
 8003d9c:	08003de5 	.word	0x08003de5
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003e45 	.word	0x08003e45
 8003db0:	08003e45 	.word	0x08003e45
 8003db4:	08003e45 	.word	0x08003e45
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003e45 	.word	0x08003e45
 8003dc0:	08003df5 	.word	0x08003df5
 8003dc4:	08003dfd 	.word	0x08003dfd
 8003dc8:	08003e05 	.word	0x08003e05
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f9cb 	bl	8004168 <XcpCmdUpload>
        break;
 8003dd2:	e03b      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa03 	bl	80041e0 <XcpCmdShortUpload>
        break;
 8003dda:	e037      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f9a9 	bl	8004134 <XcpCmdSetMta>
        break;
 8003de2:	e033      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fa41 	bl	800426c <XcpCmdBuildCheckSum>
        break;
 8003dea:	e02f      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f979 	bl	80040e4 <XcpCmdGetId>
        break;
 8003df2:	e02b      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f969 	bl	80040cc <XcpCmdSynch>
        break;
 8003dfa:	e027      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f941 	bl	8004084 <XcpCmdGetStatus>
        break;
 8003e02:	e023      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f925 	bl	8004054 <XcpCmdDisconnect>
        break;
 8003e0a:	e01f      	b.n	8003e4c <XcpPacketReceived+0x194>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa87 	bl	8004320 <XcpCmdProgramMax>
        break;
 8003e12:	e01b      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fab3 	bl	8004380 <XcpCmdProgram>
        break;
 8003e1a:	e017      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fa59 	bl	80042d4 <XcpCmdProgramStart>
        break;
 8003e22:	e013      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 faf5 	bl	8004414 <XcpCmdProgramClear>
        break;
 8003e2a:	e00f      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb17 	bl	8004460 <XcpCmdProgramReset>
        break;
 8003e32:	e00b      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb27 	bl	8004488 <XcpCmdProgramPrepare>
        break;
 8003e3a:	e007      	b.n	8003e4c <XcpPacketReceived+0x194>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      case XCP_CMD_USER:
        XcpCmdUser(data);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb2e 	bl	800449e <XcpCmdUser>
        break;
 8003e42:	e003      	b.n	8003e4c <XcpPacketReceived+0x194>
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8003e44:	2020      	movs	r0, #32
 8003e46:	f000 f85f 	bl	8003f08 <XcpSetCtoError>
        break;
 8003e4a:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003e4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <XcpPacketReceived+0x1a4>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8003e56:	2010      	movs	r0, #16
 8003e58:	f000 f856 	bl	8003f08 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003e5e:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	@ 0x86
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dd0c      	ble.n	8003e80 <XcpPacketReceived+0x1c8>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8003e6e:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003e70:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	@ 0x86
 8003e74:	4619      	mov	r1, r3
 8003e76:	4804      	ldr	r0, [pc, #16]	@ (8003e88 <XcpPacketReceived+0x1d0>)
 8003e78:	f000 f808 	bl	8003e8c <XcpTransmitPacket>
 8003e7c:	e000      	b.n	8003e80 <XcpPacketReceived+0x1c8>
    return;
 8003e7e:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000055c 	.word	0x2000055c

08003e8c <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fd6d 	bl	800397c <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 8003eba:	e009      	b.n	8003ed0 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 8003ecc:	f7ff fde5 	bl	8003a9a <CopService>
  while (length-- > 0)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	60ba      	str	r2, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 8003eda:	7dfa      	ldrb	r2, [r7, #23]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 8003ee0:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 8003ef0:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <XcpProtectResources+0x18>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2000055c 	.word	0x2000055c

08003f08 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8003f12:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <XcpSetCtoError+0x2c>)
 8003f14:	22fe      	movs	r2, #254	@ 0xfe
 8003f16:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8003f18:	4a06      	ldr	r2, [pc, #24]	@ (8003f34 <XcpSetCtoError+0x2c>)
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 8003f1e:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <XcpSetCtoError+0x2c>)
 8003f20:	2202      	movs	r2, #2
 8003f22:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpSetCtoError ***/
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000055c 	.word	0x2000055c

08003f38 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3301      	adds	r3, #1
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3302      	adds	r3, #2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3303      	adds	r3, #3
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0a1a      	lsrs	r2, r3, #8
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0c1a      	lsrs	r2, r3, #16
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	3302      	adds	r3, #2
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0e1a      	lsrs	r2, r3, #24
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	3303      	adds	r3, #3
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 8003fd4:	f7ff ff8a 	bl	8003eec <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <XcpCmdConnect+0x84>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <XcpCmdConnect+0x84>)
 8003fe2:	22ff      	movs	r2, #255	@ 0xff
 8003fe4:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <XcpCmdConnect+0x84>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <XcpCmdConnect+0x84>)
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	f043 0310 	orr.w	r3, r3, #16
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <XcpCmdConnect+0x84>)
 8003ff8:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <XcpCmdConnect+0x84>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 8004000:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <XcpCmdConnect+0x84>)
 8004002:	789a      	ldrb	r2, [r3, #2]
 8004004:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <XcpCmdConnect+0x84>)
 8004006:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004008:	f7ff fcd0 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 800400c:	4603      	mov	r3, r0
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <XcpCmdConnect+0x84>)
 8004012:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8004014:	f7ff fcfa 	bl	8003a0c <ComGetActiveInterfaceMaxTxLen>
 8004018:	4603      	mov	r3, r0
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <XcpCmdConnect+0x84>)
 800401e:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8004020:	f7ff fcf4 	bl	8003a0c <ComGetActiveInterfaceMaxTxLen>
 8004024:	4603      	mov	r3, r0
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	b29b      	uxth	r3, r3
 800402a:	b2da      	uxtb	r2, r3
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <XcpCmdConnect+0x84>)
 800402e:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8004030:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <XcpCmdConnect+0x84>)
 8004032:	2201      	movs	r2, #1
 8004034:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <XcpCmdConnect+0x84>)
 8004038:	2201      	movs	r2, #1
 800403a:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <XcpCmdConnect+0x84>)
 800403e:	2208      	movs	r2, #8
 8004040:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 8004044:	f7ff fa9f 	bl	8003586 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000055c 	.word	0x2000055c

08004054 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <XcpCmdDisconnect+0x2c>)
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* enable resource protection */
  XcpProtectResources();
 8004064:	f7ff ff42 	bl	8003eec <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <XcpCmdDisconnect+0x2c>)
 800406a:	22ff      	movs	r2, #255	@ 0xff
 800406c:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800406e:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <XcpCmdDisconnect+0x2c>)
 8004070:	2201      	movs	r2, #1
 8004072:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdDisconnect ***/
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000055c 	.word	0x2000055c

08004084 <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800408c:	4b0e      	ldr	r3, [pc, #56]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 800408e:	22ff      	movs	r2, #255	@ 0xff
 8004090:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 8004094:	2200      	movs	r2, #0
 8004096:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 800409a:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 80040a0:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 80040a2:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <XcpCmdGetStatus+0x44>)
 80040b6:	2206      	movs	r2, #6
 80040b8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdGetStatus ***/
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	2000055c 	.word	0x2000055c

080040cc <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7ff ff17 	bl	8003f08 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <XcpCmdGetId+0x44>)
 80040ee:	22ff      	movs	r2, #255	@ 0xff
 80040f0:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80040f2:	4a0e      	ldr	r2, [pc, #56]	@ (800412c <XcpCmdGetId+0x48>)
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <XcpCmdGetId+0x44>)
 80040f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <XcpCmdGetId+0x44>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <XcpCmdGetId+0x44>)
 8004102:	2200      	movs	r2, #0
 8004104:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <XcpCmdGetId+0x44>)
 8004108:	2200      	movs	r2, #0
 800410a:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 800410c:	2307      	movs	r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 8004110:	4907      	ldr	r1, [pc, #28]	@ (8004130 <XcpCmdGetId+0x4c>)
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ff38 	bl	8003f88 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <XcpCmdGetId+0x44>)
 800411a:	2208      	movs	r2, #8
 800411c:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdGetId ***/
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2000055c 	.word	0x2000055c
 800412c:	08004764 	.word	0x08004764
 8004130:	20000560 	.word	0x20000560

08004134 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <XcpCmdSetMta+0x30>)
 800413e:	22ff      	movs	r2, #255	@ 0xff
 8004140:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fef6 	bl	8003f38 <XcpGetOrderedLong>
 800414c:	4603      	mov	r3, r0
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <XcpCmdSetMta+0x30>)
 8004150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <XcpCmdSetMta+0x30>)
 8004156:	2201      	movs	r2, #1
 8004158:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdSetMta ***/
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000055c 	.word	0x2000055c

08004168 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004170:	f7ff fc1c 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d803      	bhi.n	800418a <XcpCmdUpload+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004182:	2022      	movs	r0, #34	@ 0x22
 8004184:	f7ff fec0 	bl	8003f08 <XcpSetCtoError>
    return;
 8004188:	e023      	b.n	80041d2 <XcpCmdUpload+0x6a>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8004192:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <XcpCmdUpload+0x70>)
 8004194:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <XcpCmdUpload+0x74>)
 800419a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800419e:	89fa      	ldrh	r2, [r7, #14]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe ff43 	bl	800302c <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <XcpCmdUpload+0x74>)
 80041a8:	22ff      	movs	r2, #255	@ 0xff
 80041aa:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <XcpCmdUpload+0x74>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	3201      	adds	r2, #1
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <XcpCmdUpload+0x74>)
 80041bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b21a      	sxth	r2, r3
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <XcpCmdUpload+0x74>)
 80041ce:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdUpload ***/
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000055d 	.word	0x2000055d
 80041dc:	2000055c 	.word	0x2000055c

080041e0 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80041e8:	f7ff fbe0 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d803      	bhi.n	8004202 <XcpCmdShortUpload+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80041fa:	2022      	movs	r0, #34	@ 0x22
 80041fc:	f7ff fe84 	bl	8003f08 <XcpSetCtoError>
    return;
 8004200:	e02c      	b.n	800425c <XcpCmdShortUpload+0x7c>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fe96 	bl	8003f38 <XcpGetOrderedLong>
 800420c:	4603      	mov	r3, r0
 800420e:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800421c:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <XcpCmdShortUpload+0x88>)
 800421e:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004224:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8004228:	89fa      	ldrh	r2, [r7, #14]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fefe 	bl	800302c <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004232:	22ff      	movs	r2, #255	@ 0xff
 8004234:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	3201      	adds	r2, #1
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	4413      	add	r3, r2
 8004244:	4a07      	ldr	r2, [pc, #28]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004246:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3301      	adds	r3, #1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	b21a      	sxth	r2, r3
 8004256:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <XcpCmdShortUpload+0x84>)
 8004258:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdShortUpload ***/
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000055c 	.word	0x2000055c
 8004268:	2000055d 	.word	0x2000055d

0800426c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 800427a:	22ff      	movs	r2, #255	@ 0xff
 800427c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fe58 	bl	8003f38 <XcpGetOrderedLong>
 8004288:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f107 020c 	add.w	r2, r7, #12
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fe07 	bl	8003eaa <XcpComputeChecksum>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 80042a0:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4909      	ldr	r1, [pc, #36]	@ (80042d0 <XcpCmdBuildCheckSum+0x64>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fe6c 	bl	8003f88 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80042bc:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <XcpCmdBuildCheckSum+0x60>)
 80042be:	2208      	movs	r2, #8
 80042c0:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	2000055c 	.word	0x2000055c
 80042d0:	20000560 	.word	0x20000560

080042d4 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <XcpCmdProgramStart+0x48>)
 80042de:	22ff      	movs	r2, #255	@ 0xff
 80042e0:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 80042e2:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <XcpCmdProgramStart+0x48>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <XcpCmdProgramStart+0x48>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80042ee:	f7ff fb5d 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 80042f2:	4603      	mov	r3, r0
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b09      	ldr	r3, [pc, #36]	@ (800431c <XcpCmdProgramStart+0x48>)
 80042f8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80042fa:	4b08      	ldr	r3, [pc, #32]	@ (800431c <XcpCmdProgramStart+0x48>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <XcpCmdProgramStart+0x48>)
 8004302:	2200      	movs	r2, #0
 8004304:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <XcpCmdProgramStart+0x48>)
 8004308:	2200      	movs	r2, #0
 800430a:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <XcpCmdProgramStart+0x48>)
 800430e:	2207      	movs	r2, #7
 8004310:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramStart ***/
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	2000055c 	.word	0x2000055c

08004320 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <XcpCmdProgramMax+0x5c>)
 800432a:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 800432e:	f7ff fb3d 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 8004332:	4603      	mov	r3, r0
 8004334:	3b01      	subs	r3, #1
 8004336:	4619      	mov	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3301      	adds	r3, #1
 800433c:	461a      	mov	r2, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff f927 	bl	8003592 <NvmWrite>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800434a:	2031      	movs	r0, #49	@ 0x31
 800434c:	f7ff fddc 	bl	8003f08 <XcpSetCtoError>
    return;
 8004350:	e011      	b.n	8004376 <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004352:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <XcpCmdProgramMax+0x5c>)
 8004354:	22ff      	movs	r2, #255	@ 0xff
 8004356:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8004358:	f7ff fb28 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 800435c:	4603      	mov	r3, r0
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <XcpCmdProgramMax+0x5c>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	4413      	add	r3, r2
 8004368:	4a04      	ldr	r2, [pc, #16]	@ (800437c <XcpCmdProgramMax+0x5c>)
 800436a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800436e:	4b03      	ldr	r3, [pc, #12]	@ (800437c <XcpCmdProgramMax+0x5c>)
 8004370:	2201      	movs	r2, #1
 8004372:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramMax ***/
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	2000055c 	.word	0x2000055c

08004380 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8004388:	f7ff fb10 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 800438c:	4603      	mov	r3, r0
 800438e:	3b01      	subs	r3, #1
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	3201      	adds	r2, #1
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	4293      	cmp	r3, r2
 8004398:	dc03      	bgt.n	80043a2 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800439a:	2022      	movs	r0, #34	@ 0x22
 800439c:	f7ff fdb4 	bl	8003f08 <XcpSetCtoError>
    return;
 80043a0:	e033      	b.n	800440a <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80043a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <XcpCmdProgram+0x90>)
 80043a4:	22ff      	movs	r2, #255	@ 0xff
 80043a6:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80043a8:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <XcpCmdProgram+0x90>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3301      	adds	r3, #1
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 80043ba:	f7ff f916 	bl	80035ea <NvmDone>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d121      	bne.n	8004408 <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 80043c4:	2031      	movs	r0, #49	@ 0x31
 80043c6:	f7ff fd9f 	bl	8003f08 <XcpSetCtoError>
    }
    return;
 80043ca:	e01d      	b.n	8004408 <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80043cc:	4b10      	ldr	r3, [pc, #64]	@ (8004410 <XcpCmdProgram+0x90>)
 80043ce:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3301      	adds	r3, #1
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3302      	adds	r3, #2
 80043de:	461a      	mov	r2, r3
 80043e0:	f7ff f8d7 	bl	8003592 <NvmWrite>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80043ea:	2031      	movs	r0, #49	@ 0x31
 80043ec:	f7ff fd8c 	bl	8003f08 <XcpSetCtoError>
    return;
 80043f0:	e00b      	b.n	800440a <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <XcpCmdProgram+0x90>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	3201      	adds	r2, #1
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	4a03      	ldr	r2, [pc, #12]	@ (8004410 <XcpCmdProgram+0x90>)
 8004402:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8004406:	e000      	b.n	800440a <XcpCmdProgram+0x8a>
    return;
 8004408:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	2000055c 	.word	0x2000055c

08004414 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <XcpCmdProgramClear+0x48>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fd85 	bl	8003f38 <XcpGetOrderedLong>
 800442e:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff f8bd 	bl	80035b2 <NvmErase>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800443e:	2031      	movs	r0, #49	@ 0x31
 8004440:	f7ff fd62 	bl	8003f08 <XcpSetCtoError>
    return;
 8004444:	e006      	b.n	8004454 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <XcpCmdProgramClear+0x48>)
 8004448:	22ff      	movs	r2, #255	@ 0xff
 800444a:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <XcpCmdProgramClear+0x48>)
 800444e:	2201      	movs	r2, #1
 8004450:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramClear ***/
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2000055c 	.word	0x2000055c

08004460 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8004468:	f7fe fdb0 	bl	8002fcc <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <XcpCmdProgramReset+0x24>)
 800446e:	22ff      	movs	r2, #255	@ 0xff
 8004470:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004472:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <XcpCmdProgramReset+0x24>)
 8004474:	2201      	movs	r2, #1
 8004476:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdProgramReset ***/
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000055c 	.word	0x2000055c

08004488 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8004490:	2031      	movs	r0, #49	@ 0x31
 8004492:	f7ff fd39 	bl	8003f08 <XcpSetCtoError>
  return;
 8004496:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <XcpCmdUser>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUser(blt_int8u *data)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  blt_int8u subCommand;

  /* Read out the sub command code. */
  subCommand = data[1];
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	73fb      	strb	r3, [r7, #15]

  /* Dispatch sub command handling. */
  switch (subCommand)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b17      	cmp	r3, #23
 80044b0:	d103      	bne.n	80044ba <XcpCmdUser+0x1c>
  {
#if (BOOT_INFO_TABLE_ENABLE > 0)
  case XCP_CMD_USER_SUB_INFOTABLE:
    XcpCmdUserSubCmdInfoTable(data);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f809 	bl	80044ca <XcpCmdUserSubCmdInfoTable>
    break;
 80044b8:	e003      	b.n	80044c2 <XcpCmdUser+0x24>
#endif

  default:
    XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80044ba:	2020      	movs	r0, #32
 80044bc:	f7ff fd24 	bl	8003f08 <XcpSetCtoError>
    break;
 80044c0:	bf00      	nop
  }
} /*** end of XcpCmdUser ***/
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <XcpCmdUserSubCmdInfoTable>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUserSubCmdInfoTable(blt_int8u *data)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  blt_int8u commandId;

  /* Read out the command ID. */
  commandId = data[2];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	789b      	ldrb	r3, [r3, #2]
 80044d6:	73fb      	strb	r3, [r7, #15]

  /* Dispatch info table command ID handling. */
  switch (commandId)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d00e      	beq.n	80044fc <XcpCmdUserSubCmdInfoTable+0x32>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	dc10      	bgt.n	8004504 <XcpCmdUserSubCmdInfoTable+0x3a>
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d002      	beq.n	80044ec <XcpCmdUserSubCmdInfoTable+0x22>
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d004      	beq.n	80044f4 <XcpCmdUserSubCmdInfoTable+0x2a>
 80044ea:	e00b      	b.n	8004504 <XcpCmdUserSubCmdInfoTable+0x3a>
  {
  case XCP_CMD_IT_CID_GETINFO:
    XcpCmdUserSubCmdInfoTableCidGetInfo(data);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f811 	bl	8004514 <XcpCmdUserSubCmdInfoTableCidGetInfo>
    break;
 80044f2:	e00b      	b.n	800450c <XcpCmdUserSubCmdInfoTable+0x42>

  case XCP_CMD_IT_CID_DOWNLOAD:
    XcpCmdUserSubCmdInfoTableCidDownload(data);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f841 	bl	800457c <XcpCmdUserSubCmdInfoTableCidDownload>
    break;
 80044fa:	e007      	b.n	800450c <XcpCmdUserSubCmdInfoTable+0x42>

  case XCP_CMD_IT_CID_CHECK:
    XcpCmdUserSubCmdInfoTableCidCheck(data);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f86d 	bl	80045dc <XcpCmdUserSubCmdInfoTableCidCheck>
    break;
 8004502:	e003      	b.n	800450c <XcpCmdUserSubCmdInfoTable+0x42>

  default:
    XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8004504:	2020      	movs	r0, #32
 8004506:	f7ff fcff 	bl	8003f08 <XcpSetCtoError>
    break;
 800450a:	bf00      	nop
  }
} /*** end of XcpCmdUserSubCmdInfoTable ***/
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <XcpCmdUserSubCmdInfoTableCidGetInfo>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUserSubCmdInfoTableCidGetInfo(blt_int8u *data)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* Suppress compiler warning for unused parameter. */
  data = data;

  /* Set table length and base address information. */
  tableLen = InfoTableCurrentSize(INFO_TABLE_ID_FIRMWARE_NVM);
 800451c:	2001      	movs	r0, #1
 800451e:	f7ff fb31 	bl	8003b84 <InfoTableCurrentSize>
 8004522:	4603      	mov	r3, r0
 8004524:	81fb      	strh	r3, [r7, #14]
  tableAddr = InfoTableGetPtr(INFO_TABLE_ID_FIRMWARE_NVM);
 8004526:	2001      	movs	r0, #1
 8004528:	f7ff faea 	bl	8003b00 <InfoTableGetPtr>
 800452c:	4603      	mov	r3, r0
 800452e:	60bb      	str	r3, [r7, #8]
  /* Clear the info table in the internal RAM buffer and reset its write pointer. */
  InfoTableClear(INFO_TABLE_ID_INTERNAL_RAM);
 8004530:	2000      	movs	r0, #0
 8004532:	f7ff fafd 	bl	8003b30 <InfoTableClear>

  /* Set packet id to command response packet. */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <XcpCmdUserSubCmdInfoTableCidGetInfo+0x5c>)
 8004538:	22ff      	movs	r2, #255	@ 0xff
 800453a:	701a      	strb	r2, [r3, #0]
  /* Set the command ID that this is a response for. */
  xcpInfo.ctoData[1] = XCP_CMD_IT_CID_GETINFO;
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <XcpCmdUserSubCmdInfoTableCidGetInfo+0x5c>)
 800453e:	2204      	movs	r2, #4
 8004540:	705a      	strb	r2, [r3, #1]
  /* Store the table length. */
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)&tableLen, sizeof(tableLen));
 8004542:	480c      	ldr	r0, [pc, #48]	@ (8004574 <XcpCmdUserSubCmdInfoTableCidGetInfo+0x60>)
 8004544:	f107 030e 	add.w	r3, r7, #14
 8004548:	2202      	movs	r2, #2
 800454a:	4619      	mov	r1, r3
 800454c:	f7fe fd6e 	bl	800302c <CpuMemCopy>
  /* Store the table base address. */
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[4]), (blt_addr)&tableAddr, sizeof(tableAddr));
 8004550:	4809      	ldr	r0, [pc, #36]	@ (8004578 <XcpCmdUserSubCmdInfoTableCidGetInfo+0x64>)
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	2204      	movs	r2, #4
 8004558:	4619      	mov	r1, r3
 800455a:	f7fe fd67 	bl	800302c <CpuMemCopy>
  /* Set packet length. */
  xcpInfo.ctoLen = 8;
 800455e:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <XcpCmdUserSubCmdInfoTableCidGetInfo+0x5c>)
 8004560:	2208      	movs	r2, #8
 8004562:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdUserSubCmdInfoTableCidGetInfo ***/
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	2000055c 	.word	0x2000055c
 8004574:	2000055e 	.word	0x2000055e
 8004578:	20000560 	.word	0x20000560

0800457c <XcpCmdUserSubCmdInfoTableCidDownload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUserSubCmdInfoTableCidDownload(blt_int8u *data)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Validate length of download request */
  if (data[3] > (XCP_CTO_PACKET_LEN-4))
 8004584:	f7ff fa12 	bl	80039ac <ComGetActiveInterfaceMaxRxLen>
 8004588:	4603      	mov	r3, r0
 800458a:	3b03      	subs	r3, #3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	3203      	adds	r2, #3
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	4293      	cmp	r3, r2
 8004594:	dc03      	bgt.n	800459e <XcpCmdUserSubCmdInfoTableCidDownload+0x22>
  {
    /* Specified data length is too long. */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004596:	2022      	movs	r0, #34	@ 0x22
 8004598:	f7ff fcb6 	bl	8003f08 <XcpSetCtoError>
    return;
 800459c:	e019      	b.n	80045d2 <XcpCmdUserSubCmdInfoTableCidDownload+0x56>
  }

  /* Attempt to store the newly received data in the info table. */
  if (InfoTableAddData(INFO_TABLE_ID_INTERNAL_RAM, &data[4], data[3]) == BLT_FALSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1d19      	adds	r1, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3303      	adds	r3, #3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7ff fb0e 	bl	8003bcc <InfoTableAddData>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <XcpCmdUserSubCmdInfoTableCidDownload+0x42>
  {
    /* Data does not fit in the info table RAM buffer. */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80045b6:	2022      	movs	r0, #34	@ 0x22
 80045b8:	f7ff fca6 	bl	8003f08 <XcpSetCtoError>
    return;
 80045bc:	e009      	b.n	80045d2 <XcpCmdUserSubCmdInfoTableCidDownload+0x56>
  }

  /* Set packet id to command response packet. */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <XcpCmdUserSubCmdInfoTableCidDownload+0x5c>)
 80045c0:	22ff      	movs	r2, #255	@ 0xff
 80045c2:	701a      	strb	r2, [r3, #0]
  /* Set the command ID that this is a response for. */
  xcpInfo.ctoData[1] = XCP_CMD_IT_CID_DOWNLOAD;
 80045c4:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <XcpCmdUserSubCmdInfoTableCidDownload+0x5c>)
 80045c6:	2206      	movs	r2, #6
 80045c8:	705a      	strb	r2, [r3, #1]
  /* Set packet length. */
  xcpInfo.ctoLen = 2;
 80045ca:	4b03      	ldr	r3, [pc, #12]	@ (80045d8 <XcpCmdUserSubCmdInfoTableCidDownload+0x5c>)
 80045cc:	2202      	movs	r2, #2
 80045ce:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
} /*** end of XcpCmdUserSubCmdInfoTableCidDownload ***/
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000055c 	.word	0x2000055c

080045dc <XcpCmdUserSubCmdInfoTableCidCheck>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUserSubCmdInfoTableCidCheck(blt_int8u *data)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Set packet id to command response packet. */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <XcpCmdUserSubCmdInfoTableCidCheck+0x58>)
 80045e6:	22ff      	movs	r2, #255	@ 0xff
 80045e8:	701a      	strb	r2, [r3, #0]
  /* Set the command ID that this is a response for. */
  xcpInfo.ctoData[1] = XCP_CMD_IT_CID_CHECK;
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <XcpCmdUserSubCmdInfoTableCidCheck+0x58>)
 80045ec:	2208      	movs	r2, #8
 80045ee:	705a      	strb	r2, [r3, #1]
  /* Set packet length. */
  xcpInfo.ctoLen = 3;
 80045f0:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <XcpCmdUserSubCmdInfoTableCidCheck+0x58>)
 80045f2:	2203      	movs	r2, #3
 80045f4:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86

  /* Verify that the contents of the internal RAM info table has the same size as the
   * one in non-volatile memory.
   */
  if (InfoTableCurrentSize(INFO_TABLE_ID_INTERNAL_RAM) !=
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7ff fac3 	bl	8003b84 <InfoTableCurrentSize>
 80045fe:	4603      	mov	r3, r0
 8004600:	461c      	mov	r4, r3
      InfoTableCurrentSize(INFO_TABLE_ID_FIRMWARE_NVM))
 8004602:	2001      	movs	r0, #1
 8004604:	f7ff fabe 	bl	8003b84 <InfoTableCurrentSize>
 8004608:	4603      	mov	r3, r0
  if (InfoTableCurrentSize(INFO_TABLE_ID_INTERNAL_RAM) !=
 800460a:	429c      	cmp	r4, r3
 800460c:	d003      	beq.n	8004616 <XcpCmdUserSubCmdInfoTableCidCheck+0x3a>
  {
    /* Content of the internal RAM buffer were not yet fully downloaded. */
    XcpSetCtoError(XCP_ERR_SEQUENCE);
 800460e:	2029      	movs	r0, #41	@ 0x29
 8004610:	f7ff fc7a 	bl	8003f08 <XcpSetCtoError>
    return;
 8004614:	e00b      	b.n	800462e <XcpCmdUserSubCmdInfoTableCidCheck+0x52>
  }

  /* Request bootloader application to perform the info table check. */
  if (InfoTableCheck() == BLT_TRUE)
 8004616:	f7ff fa55 	bl	8003ac4 <InfoTableCheck>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d103      	bne.n	8004628 <XcpCmdUserSubCmdInfoTableCidCheck+0x4c>
  {
    /* Info table check passed. Firmware update is allow to proceed. */
    xcpInfo.ctoData[2] = 1;
 8004620:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <XcpCmdUserSubCmdInfoTableCidCheck+0x58>)
 8004622:	2201      	movs	r2, #1
 8004624:	709a      	strb	r2, [r3, #2]
 8004626:	e002      	b.n	800462e <XcpCmdUserSubCmdInfoTableCidCheck+0x52>
  }
  else
  {
    /* Info table check failed. Firmware update should be aborted. */
    xcpInfo.ctoData[2] = 0;
 8004628:	4b02      	ldr	r3, [pc, #8]	@ (8004634 <XcpCmdUserSubCmdInfoTableCidCheck+0x58>)
 800462a:	2200      	movs	r2, #0
 800462c:	709a      	strb	r2, [r3, #2]
  }
} /*** end of XcpCmdUserSubCmdInfoTableCidCheck ***/
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bd90      	pop	{r4, r7, pc}
 8004634:	2000055c 	.word	0x2000055c

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4d0d      	ldr	r5, [pc, #52]	@ (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2600      	movs	r6, #0
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4d0b      	ldr	r5, [pc, #44]	@ (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	@ (800467c <__libc_init_array+0x44>)
 800464c:	f000 f818 	bl	8004680 <_init>
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2600      	movs	r6, #0
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	0800476c 	.word	0x0800476c
 8004674:	0800476c 	.word	0x0800476c
 8004678:	0800476c 	.word	0x0800476c
 800467c:	08004770 	.word	0x08004770

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
